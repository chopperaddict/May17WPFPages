<Page x:Class="WpfUI.Page1"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WpfUI" 
	 xmlns:local1="clr-namespace:WPFPages"
	 xmlns:views="clr-namespace:WPFPages"
	  xmlns:Userctrl="clr-namespace:WPFPages.UserControls"
	 ShowsNavigationUI="False"
      mc:Ignorable="d" 
      d:DesignHeight="750" d:DesignWidth="1000"
      Title="Page1"
	  MinHeight="600"  MinWidth="800">

	<Page.Resources>
		<!--<SolidColorBrush x:Key="bk"  Color="{TemplateBinding Grid.Background}"/>-->

		<Style x:Key="ToggleBkGrndOnmouseover" TargetType="Grid">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" >
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
								<GradientStop Color="red" Offset="0"/>
								<GradientStop Color="DarkOrange" Offset="1"/>
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>


		<!--Another Ellipse as a button-->
		<Style x:Key="ellip" TargetType="Button">
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="Width" Value="200" />
			<Setter Property="Height" Value="25" />
			<Setter Property="Background" Value="Green" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="FontWeight" Value="Medium" />
			<Setter Property="VerticalAlignment" Value="Top" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="HorizontalContentAlignment" Value="Right" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Content" Value="Black Text" />
			<!--Set to true to not get any properties from the themes.-->
			<!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Grid
							Height="80"	   
							Width="180">
							<Ellipse 
								Grid.Row="0"
								Grid.Column="0"
								Width="180"
								Height="77"
								Fill="LightGreen"/>
							<ContentPresenter HorizontalAlignment="Center"
										VerticalAlignment="Center"/>
						</Grid>

					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="EllipseButton" TargetType="Ellipse">

			<Setter Property="Fill" Value="Green"/>
			<Style.Triggers >
				<DataTrigger Binding="{Binding ElementName=chkBox, Path=IsChecked}" Value="True">
					<Setter  Property="Fill" Value="Red" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Storyboard x:Key="Storyboard1">
			<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Vignette">
				<EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="4.047"/>
			</DoubleAnimationUsingKeyFrames>
			<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="Vignette">
				<EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="4.4"/>
			</DoubleAnimationUsingKeyFrames>
			<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="Vignette">
				<EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="187"/>
			</DoubleAnimationUsingKeyFrames>
			<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)" Storyboard.TargetName="Vignette">
				<EasingDoubleKeyFrame KeyTime="0:0:1.6" Value="211"/>
			</DoubleAnimationUsingKeyFrames>
		</Storyboard>

	</Page.Resources>
	<Page.Triggers>
		<EventTrigger RoutedEvent="FrameworkElement.Loaded">
			<BeginStoryboard Storyboard="{StaticResource Storyboard1}"/>
		</EventTrigger>
	</Page.Triggers>




	<Grid >
		<!--#region grid setup-->
		<Grid.Background>
			<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
				<GradientStop Color="Black" Offset="0"/>
				<GradientStop Color="Yellow" Offset="0.972"/>
			</LinearGradientBrush>
		</Grid.Background>

		<Grid.RowDefinitions>
			<RowDefinition Height="20"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="85"/>
			<RowDefinition Height="85"/>
			<RowDefinition Height="10"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="10"/>
			<ColumnDefinition Width="auto"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="170"/>

		</Grid.ColumnDefinitions>
		<!--#endregion grid setup-->



		<!--<WrapPanel Grid.Row="0" Grid.Column="1" 
				 Grid.ColumnSpan="3" 
				 Grid.RowSpan="1" Height="80"
				 Visibility="Collapsed">

			<Button 
				x:Name="btn1"
				Height="50" Width="185" 
				Margin="1"
				Click="Page1_Click"
				Foreground="Black"
				Style="{StaticResource StandardYtoRGradientButton}"
				>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        VerticalAlignment="Center">
					<TextBlock FontFamily="Wingdings" Text="ü"
					 Style="{StaticResource WingDingStyle}"/>
					<TextBlock Text="StandardYtoRGradientButton" FontSize="12" VerticalAlignment="Center"/>
				</StackPanel>
			</Button>

			<Button 
				x:Name="btn2"
				Click="Page2_Click"
				Height="50"
				Width="140"
				Style="{StaticResource RedToBlackButton}"				
				>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        VerticalAlignment="Center">
					<TextBlock FontFamily="Wingdings" Text="ü"
					 Style="{StaticResource WingDingStyle}"/>
					<TextBlock Text="RedToBlackButton" FontSize="12" VerticalAlignment="Center"/>
				</StackPanel>
			</Button>

			<Button  
				x:Name="btn3"
				Height="50"
				Width="125"
				Style="{StaticResource RedToBlackButton}"				
				Click="Page3_Click"
				>

				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        VerticalAlignment="Center">
					<TextBlock FontFamily="Wingdings" Text="ü"
					 Style="{StaticResource WingDingStyle}"/>
					<TextBlock Text="btn3" 
						HorizontalAlignment="Center"
						VerticalAlignment="Center" FontSize="12"/>
				</StackPanel>
			</Button>
			<Button  
				x:Name="btn4"
				Height="50"
				Width="105"
				Foreground="Black"
				Style="{StaticResource RedToBlackButton}"				
				Click="Page4_Click"
				>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        VerticalAlignment="Center">
					<TextBlock FontFamily="Wingdings" Text="ü"
					 Style="{StaticResource WingDingStyle}"/>
					<TextBlock Text="btn4" 
					HorizontalAlignment="Center"
					VerticalAlignment="Center" FontSize="12"/>
				</StackPanel>
			</Button>

			<Button  
				x:Name="btn5"
				Height="50"
				Width="105"
				Style="{StaticResource RedToBlackButton}"				
				Click="Page4_Click"
				>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        VerticalAlignment="Center">
					<TextBlock FontFamily="Wingdings" Text="ü"
					 Style="{StaticResource WingDingStyle}"/>
					<TextBlock Text="btn5" 
					HorizontalAlignment="Center"
					VerticalAlignment="Center" FontSize="12"/>
				</StackPanel>
			</Button>
			<Button  
				x:Name="btn6"
				Height="50"
				Width="155"
				Style="{StaticResource ExitButton}"
				Click="ExitButton_Click"
				>
				<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                        VerticalAlignment="Center">
					<TextBlock FontFamily="Wingdings" Text="ü" Foreground="Green" FontSize="12"
					 Style="{StaticResource WingDingStyle}"/>
					<TextBlock Text="Exit Application" 
					HorizontalAlignment="Center"
					VerticalAlignment="Center" FontSize="12"/>
				</StackPanel>
			</Button>
		</WrapPanel>-->


		<!--Main design area of LEFT COLUMN-->
		<StackPanel  Name="Stackpanel1"
			Grid.Row="1" Grid.Column="1" 
			Width="390"			
			Margin="5,3,0,10"
			HorizontalAlignment="Left" Grid.RowSpan="3">

			<TextBlock HorizontalAlignment="Center"
				VerticalAlignment="Center"					 
				Text="This is Page 1"
				Foreground="White"/>
			<TextBlock HorizontalAlignment="Center"
				VerticalAlignment="Center"					 
				Text="demonstrates how the binding works"
				Foreground="White"/>
			<TextBlock HorizontalAlignment="Center"
				VerticalAlignment="Center"					 
				Text="Move the slider and the value will"
				Foreground="White"/>
			<TextBlock HorizontalAlignment="Center"
				VerticalAlignment="Center"					 					 
				Text="be shown in the field below..."
				Foreground="White"/>
			<Slider
				x:Name="MySlider" Width="200" Height="25" Margin="10"
				IsSnapToTickEnabled="True" Maximum="100" Minimum="0" Value="45"
				DataContext="TextLabel"
				>
			</Slider>
			<TextBox x:Name="SliderValue" 
				Width="200" 
				HorizontalAlignment="Center"
				TextAlignment="Center"	
				Padding="5"
					Margin="1"
					Text="{Binding Path=Value, ElementName=MySlider, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
				></TextBox>
			<!--End of Slider functionality-->

			<!--#region btn10 All Working-->
			<!--Fancy Magenta button with WingDings above text-->
			<Grid x:Name="GR1">
				<!--We put the mouseover style here because the button has 
				Text Overlayed with TextBlocks, but the Grid is always accessible-->

				<!--Underlying Button for basic functionality-->
				<Button x:Name="btn10"
					Width="200" 
					Height="75" 
					Margin="5" 
					Padding="10"				   					
					Click="btn10_Click"
					BorderThickness="3"	
					   Background="MediumOrchid"
					   HorizontalAlignment="Center"
					>
				</Button>
				<!--Use Stackpanel to layout the text and WingDing-->
				<StackPanel x:Name="SP1" Orientation="Vertical" 
					  Width="200"
					  Height="75"
					  PreviewMouseDown="btn10_Click"
						  >
					<StackPanel.Style>
						<!--It is This control that actually paints the BackGround property of this 
						entire mishmash of controls when the Mouseover of its parent Grid occur-->
						<Style TargetType="StackPanel">
							<Style.Triggers>
								<!--So, when Btn2 Mouseover occurs, these Setters are implemented-->
								<DataTrigger Binding="{Binding ElementName=GR1, Path=IsMouseOver}" Value="True">
									<Setter Property="Background" Value="green" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</StackPanel.Style>
					<!--It is the PreviewMouseDown on the surrounding StackPanel 
					that lets the TextBlocks show the popup-->
					<TextBlock 
						FontFamily="Wingdings" 
						FontSize="28" 
						Text="ü"
						HorizontalAlignment="Center"
						>
						<!--Create a dropshadow bottom right on WingDing in red-->
						<TextBlock.Effect>
							<DropShadowEffect Direction="280" Color="Red"
							 ShadowDepth="4" />
						</TextBlock.Effect>
					</TextBlock>
					<TextBlock 
						Text="Yes" 
						FontSize="28"
						HorizontalAlignment="Center" >
						<!--Create a dropshadow bottom right on Text in red-->
						<TextBlock.Effect>
							<DropShadowEffect Direction="280" Color="Red"
							ShadowDepth="4"/>
						</TextBlock.Effect>
					</TextBlock>
				</StackPanel>
			</Grid>
			<!--End of Complex button-->
			<!--#endregion btn10-->

			<!--#region btn11 - all working-->
			<Button Width="200" Height="85" Margin="10"				   
				x:Name="btn11"
				Foreground="Blue"	
				BorderBrush="DarkMagenta"
				Background="Yellow"
			     Click="LoadButtonStack_Click">
				<!--Because the Grid is inside the Button, We have to force it to be the 
				same size as Button above to make mouseover in Style Work-->
				<Grid
					Height="85" Width="200"
					>
					<!--Style="{StaticResource ToggleBkGrndOnmouseover}"-->
					<StackPanel Orientation="Horizontal" HorizontalAlignment="Center"						  
						VerticalAlignment="Center">
						<TextBlock FontFamily="Wingdings" FontSize="36" Text="ü"
						 PreviewMouseDown="LoadButtonStack_Click"/>
						<TextBlock Text=" Show Button Stack page" Foreground="Black" 
						 FontSize="12"  FontWeight="Bold" Padding="10"
						 PreviewMouseDown="LoadButtonStack_Click"/>
					</StackPanel>
				</Grid>
			</Button>
			<!--#endregion btn10-->


			<TextBlock  x:Name="TextblockOne"
				Background="Red" Foreground="White"
				 Width="200" Height="35" 
				 Margin="5"
					  Padding="10"
			  VerticalAlignment="Center"
				 TextAlignment="Center"
				 Text="This will be replaced"
				 >
			</TextBlock>


			<!--#region - Ellipse button-->
			<Grid>
				<!--Container grid for an Ellipsestyle button-->
				<Grid.RowDefinitions>
					<RowDefinition Height="45"/>
					<RowDefinition Height="40"/>
					<RowDefinition Height="155"/>
					<RowDefinition Height="80"/>
				</Grid.RowDefinitions>

				<!--Use WrapPanel to bring Checkbox and text to gether neatly-->
				<WrapPanel Grid.Row="0"
						 HorizontalAlignment="Center"
						 Height="25">
					<CheckBox Name="chkBox"
						Margin="5"
						HorizontalAlignment="Center" 
						Height="20" Width="15"
						ToolTip="This is a CheckBox...."
						IsChecked	="False"
						Style="{StaticResource checkBoxStyle1}">
					</CheckBox>
					<TextBlock
						Margin="5"
						Background="Transparent" Foreground="Red"
						PreviewMouseDown="ChangeColor_Click"
						Style="{StaticResource CheckBoxTextHandler}"
						>Click me to see something smart !!

					</TextBlock>
				</WrapPanel>

				<WrapPanel Orientation="Vertical"
					HorizontalAlignment="Center"
					VerticalAlignment="Top"
						  Margin="5"
						 Grid.Row="1"
						  >
					<!--This is a TextBlock as a usercontrol that adds 2 
					new Dependency properties named ShowText & SetBackGround that are
					hardcoded to Perform the more normal Content="" & Background="" properties, 
					which means therefore Content SHOULD NOT be used with the control
					as it overrules ShowText and the quite strangely the control resizes 
					to only the length of the Content text unless we specify Height/Width 
					in our properties as we do below -->

					<!--Declare our usercontrol-->
					<!--
					<Userctrl:DependencyUserControl1 
							x:Name="tester" Grid.Row="0">
						-->
					<!--The trick here is to declare ALL the properties in 
							the Style and NOT here in the normal properties area, 
							if we wish to have the Triggers work -->
					<!--
						<Userctrl:DependencyUserControl1.Style>
							<Style TargetType="Userctrl:DependencyUserControl1">
								-->
					<!--By defining these Properties here the DataTriggers will work (mostly)
									whereas setting these above will BLOCK any changes !-->
					<!--
								<Setter Property="Userctrl:DependencyUserControl1.Width" Value="200" />
								<Setter Property="Userctrl:DependencyUserControl1.Height" Value="25" />
								<Setter Property="Userctrl:DependencyUserControl1.SetBackground" Value="Green" />
								<Setter Property="Userctrl:DependencyUserControl1.Foreground" Value="White" />
								<Setter Property="Userctrl:DependencyUserControl1.FontWeight" Value="Medium" />
								<Setter Property="Userctrl:DependencyUserControl1.BorderThickness" Value="1" />
								-->
					<!--This one does not work-->
					<!--
								<Setter Property="Userctrl:DependencyUserControl1.HorizontalAlignment" Value="Right" />
								<Setter Property="Userctrl:DependencyUserControl1.BorderBrush" Value="Black" />
								-->
					<!--This is our "Special" Dependency property-->
					<!--
								<Setter Property="Userctrl:DependencyUserControl1.SetText" Value="Mouse over Image at right" />

								<Style.Triggers>
									-->
					<!--So, here we are listening for the Mouseover on Image display defined below in Column 2, 
										& then these (TextBlock) Setters are implemented but the Button's Color 
										changes relies on the Buttons code listener, so in this case "ImageButton" -->
					<!--
									<DataTrigger Binding="{Binding ElementName=ImageButton, Path=IsMouseOver}" Value="True">
										<Setter Property="Userctrl:DependencyUserControl1.SetBackground" Value="Blue" />
										<Setter Property="Userctrl:DependencyUserControl1.Foreground" Value="Cyan" />
										<Setter Property="Userctrl:DependencyUserControl1.FontWeight" Value="Heavy" />
										-->
					<!--This is our "Special" Dependency property-->
					<!--
										<Setter Property="Userctrl:DependencyUserControl1.SetText" Value="There ya Go !!" />
										<Setter Property="Userctrl::DependencyUserControl1.HorizontalAlignment" Value="left" />
										<Setter Property="Userctrl:DependencyUserControl1.Height" Value="30" />
										<Setter Property="Userctrl:DependencyUserControl1.Width" Value="250" />
										<Setter Property="Userctrl:DependencyUserControl1.BorderBrush" Value="White" />
										<Setter Property="Userctrl:DependencyUserControl1.BorderThickness" Value="4" />

									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Userctrl:DependencyUserControl1.Style>
					</Userctrl:DependencyUserControl1>-->
				</WrapPanel>


				<!--A Mickeysoft example of color switching animation on a Button-->
				<Button x:Name="AniButton"
					Grid.Row="2"
					Height="50"
					Width="125"
					>I am an animated Button ...
					<Button.Background>
						<SolidColorBrush x:Name="AnimBrush"/>
					</Button.Background>
					<Button.Foreground>
						<SolidColorBrush x:Name="AnimFBrush"/>
					</Button.Foreground>
					<Button.Triggers>
						<EventTrigger RoutedEvent="Button.Loaded">
							<BeginStoryboard>
								<Storyboard RepeatBehavior="Forever">
									<!--Now we specify the Animation type we are going to use
									As here, we can use multiple xxx animations-->
									<DoubleAnimation Storyboard.TargetName="AniButton" 
										   Storyboard.TargetProperty="Width" From="175" To="350" 
										   Duration="0:0:3"  AutoReverse="True"  RepeatBehavior="Forever"/>
									<ColorAnimation 
										Storyboard.TargetName="AnimBrush" 
										  Storyboard.TargetProperty="(SolidColorBrush.Color)"
										  From="Red" To="LightGreen" Duration="0:0:.6" 
										  AutoReverse="True"  RepeatBehavior="Forever" />
									<ColorAnimation
										  Storyboard.TargetName="AnimFBrush" 
										  Storyboard.TargetProperty="(SolidColorBrush.Color)"
										  From="White" To="Black" Duration="0:0:.6" 
										  AutoReverse="True" RepeatBehavior="Forever" />
									<DoubleAnimation Storyboard.TargetName="AniButton" 
										  Storyboard.TargetProperty="Width" From="350" To="175" 
										   Duration="0:0:3" AutoReverse="True" RepeatBehavior="Forever" />
									<!--<DoubleAnimation Storyboard.TargetName="AniButton" 
										   Storyboard.TargetProperty="Width" From="175" To="350" 
										   Duration="0:0:3" RepeatBehavior="Forever" />-->
									<!--<DoubleAnimation Storyboard.TargetName="AniButton" 
										   Storyboard.TargetProperty="Width" From="350" To="175" 
										   Duration="0:0:3"  RepeatBehavior="Forever"/>-->



								</Storyboard>
							</BeginStoryboard>
						</EventTrigger>
					</Button.Triggers>
				</Button>

				<!--<DoubleAnimation Storyboard.TargetName="AniButton" 
										   Storyboard.TargetProperty="Height" From="250" 
										   To="175" Duration="0:0:.6" BeginTime="0:0:2"  RepeatBehavior="Forever"/>-->
				<!--<DoubleAnimation Storyboard.TargetName="AniButton" 
										   Storyboard.TargetProperty="Height" From="175" To="250" 
										   Duration="0:0:.6" BeginTime="0:0:1" RepeatBehavior="Forever"/>-->
				<!--<Path Grid.Row="2" Data="M 200,30 C 40,90 200,250 200,75 H 350" Stroke="Black" StrokeThickness="4"/>-->
				<Path Grid.Row="2" Data="M 60,20 
							C 80,50  100,50  100,120 
							H 300  H 400" 
							Stroke="Black" StrokeThickness="2"/>
				<!-- First group - M 100,20 .... H 350 = M=Start point for Left and Top, so x=100, y=20 from Top Left, 
				H 350 is the X value for lines end point (No Y value is specified)-->
				<!-- Second Group - 70,100  defines 2nd point, so we go backwards 30 points (100 - 70) but then also move 
				DOWN by 80 but as the end point is still H 350, the horizontal line is shortened -->
				<!--  
				-->


			</Grid>

			<!--#region - Ellipse button-->

			<!--End of Left Column-->
		</StackPanel>

		<!--Another Ellipse style button, but based on a BORDER 
		Uses a ContentPresenter -->
		<Grid Grid.Row="3" Grid.Column="1" Width="180" Height="80">
			<StackPanel Orientation="Horizontal">
				<!--<Border BorderBrush="Black" BorderThickness="1" 
				   CornerRadius="80" Width="70" Background="Aquamarine" PreviewMouseDown="Mousedn_Click">
				<Ellipse IsHitTestVisible="True" />
			</Border>

			<TextBlock Text="Click" 
				VerticalAlignment="Center" 
				HorizontalAlignment="Center"  PreviewMouseDown="Mousedn_Click"/>

				<Polygon Points="75, 9 1, 10 40, 70"
					    Fill="DarkGoldenrod"
					    StrokeThickness="2"
					    Stroke="Black">
				
				</Polygon>
				<TextBlock ></TextBlock>-->
				<TextBlock Text="Test of trial"
					 Height="80"
					 Width="120"
					 Padding="32,32,0,0"
						 PreviewMouseDown="Mousedn_Click">
					<TextBlock.Background>
						<VisualBrush>
							<VisualBrush.Visual>
								<Ellipse Height="80"
					                 Width="120"
									Fill="LightBlue" 
									    PreviewMouseDown="Mousedn_Click"/>
							</VisualBrush.Visual>
						</VisualBrush>
					</TextBlock.Background>
				</TextBlock>
			</StackPanel>
		</Grid>

		<!--Right hand column-->
		<StackPanel Grid.Row="1" Grid.Column="2" 
				  Margin="39,0,40,0" Grid.RowSpan="3"
				  Grid.ColumnSpan="3"
				  VerticalAlignment="Top" 
				  HorizontalAlignment="Center" Height="581">
			<Button Style= "{StaticResource GradientStyleButton}"
				Width ="200" Height="55"	
				Content="GradientStyleButton">
			</Button>

			<!--A button with Image that has a White Vignette around it on MouseOver
			and some text above the image-->
			<Button  Name="ImageButton" Width="510" Height="510" 
				   Margin="10" 
				  >
				<Grid>
					<!--Add an image as the background and handle MouseDown -->
					<Image  Name="Vignette"  Source="/Images/Olwen.jpg"
						Style="{StaticResource ImageVignette}"
	  					PreviewMouseDown="Mousedn_Click"
					   Stretch="Fill" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Left" Height="130" VerticalAlignment="Top" Width="128" Margin="-196,-232,0,0" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment">
						<Image.RenderTransform>
							<TransformGroup>
								<ScaleTransform/>
								<SkewTransform/>
								<RotateTransform/>
								<TranslateTransform/>
							</TransformGroup>
						</Image.RenderTransform>
					</Image>

					<Grid>

						<!--Display text above our image-->
						<TextBlock Name="VignetteText" Width="120" Height="40" 
							 TextAlignment="Center"
						Background="Transparent" Foreground="White" 
							 FontSize="22"
							 VerticalAlignment="Top"
							 HorizontalAlignment="Center"
						Style="{StaticResource EllipseTextBlock}"
						Text="Hi Olwen">
					<ContentPresenter></ContentPresenter>
						</TextBlock>
					</Grid>
				</Grid>
			</Button>



		</StackPanel>


		<!--Ellipse shaped exit window-->
		<Grid Name="RightGrid" 
			 Grid.Row="2" Grid.Column="3" 
			 HorizontalAlignment="Right" 
			 Grid.RowSpan="2" Margin="0,-10,0,0">


			<Grid.RowDefinitions>
				<RowDefinition Height="90"/>
				<RowDefinition Height="80"/>
			</Grid.RowDefinitions>


			<!-- We place An ELLIPSE shaped button inside a one celled grid.
			NB Use PreviewMouseDown="PreviewMouseDown_Click" 
			to access the leftMouseDown anywhere a control does not 
			support LeftMouseDown of any type -->

			<!--This is how to create a pseudo Button shaped like an Ellipse with 
			what appears to be normal Button.Content Text on top of it and normal 
			Button functionality so that any styling of the Ellipse does not get 
			intefered with by mousing over the TextBlock that contains the 
			"Buttons" Text/Content Element-->
			<!--NB to stop the TextBlock from intefering with the Ellipses 
			MouseOver Event the Property ISHITTESTVISIBLE is set to FALSE
				so that anything inside it does not receive any Interface events 
			such as Mouse events-->
			<Ellipse x:Name="Ellipse9"
				    Grid.Row="0"
				Style="{StaticResource MyEllipses}"
				PreviewMouseDown="CloseButton_Click"
				Stroke="Black"
				StrokeThickness="2"
				Opacity=".8"
				Width="150" Height="58" HorizontalAlignment="Right"  />

			<!--//Display the "Button Text"-->
			<StackPanel Grid.Row="0" HorizontalAlignment="Center"
					VerticalAlignment="Center" 
				IsHitTestVisible="false"
				Background="Transparent">
				<TextBlock
					Background="Transparent" Text="Close Page">
				</TextBlock>
			</StackPanel>

			<!--This is how to load and use a UserControl, this
			one is my own ExitButton based on an Ellipse
			It also relies on the inclusion of a headerline as shown below
			that defines the user Control's (file) name
			xmlns:EllipseExitButton="http://schemas.microsoft.com/netfx/2009/xaml/presentation" xmlns:local1="clr-namespace:WPFPages"
			-->
			<Grid Grid.Row="1">
				<local1:EllipseExitButton Foreground="White" FontSize="18"/>
			</Grid>


		</Grid>
		<!--Outer container Grid-->
	</Grid>
</Page>
