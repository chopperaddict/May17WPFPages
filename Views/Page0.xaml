	<Page
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
	xmlns:local="clr-namespace:WPFPages" 
	xmlns:MyData="clr-namespace:WpfUI"
	xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" x:Class="WPFPages.Page0"
	mc:Ignorable="d" 
	d:DesignHeight="450" d:DesignWidth="800"		 
     Title="Page0">

	<Page.Resources>

		<!--Define our data sources and Convertor paths -->
		<!--<local:SalaryConvertor x:Key="salaryConvertor"/>-->
		<local:AllStaff x:Key="allStaff"/>
		<MyData:People x:Key="people"/>
		<!--<local:FormatServicePeriodConvertor x:Key="formatServicePeriodConvertor"/>-->

		<!--Define some colors for use in Resources-->
		<SolidColorBrush x:Key="BorderBrushDark" Color="DarkGoldenrod"/>
		<SolidColorBrush x:Key="BorderBrushLight" Color="DarkGray"/>
		<SolidColorBrush x:Key="BackgroundUnselected" Color="LightBlue"/>
		<SolidColorBrush x:Key="BackgroundSelected" Color="Gold"/>
		<SolidColorBrush x:Key="BackgroundMouseOver" Color="Red"/>
		<SolidColorBrush x:Key="ForegroundMouseOver" Color="White"/>
		<SolidColorBrush x:Key="ForegroundSelected" Color="Magenta"/>
		<SolidColorBrush x:Key="ForegroundUnselected" Color="Black"/>
		<SolidColorBrush x:Key="TextBoxForeground" Color="Blue"/>
		<SolidColorBrush x:Key="TextBoxBackground" Color="Green"/>
		<SolidColorBrush x:Key="ListViewItemBackground" Color="Green"/>

		<!--We can either define the DataTemplate here, or down in the Items code as here (See above)-->
		<DataTemplate x:Key="MyItemTemplate" >
	<!--#region MyItemTemplate DATATEMPLATE-->
			<StackPanel Orientation="Horizontal">
				<Label Content="{Binding Name}" Foreground="Red"/>
				<Label Content="{Binding Age}"/>
			</StackPanel>
		</DataTemplate>
	<!--#endregion MyItemTemplate DATATEMPLATE-->

		<Style x:Key="LViewX" TargetType="{x:Type ListView}">
	<!--#region LViewX LISTBOX-->
			<Setter Property="Background" Value="Green"/>
			<Setter Property="Foreground" Value="Red"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<!--<Setter Property="Background" Value="DarkGreen"/>-->
					<Setter Property="Foreground" Value="White"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#ENDregion LViewX LISTBOX-->

		<Style x:Key="tblStyle5" TargetType="{x:Type TextBlock}">
	<!--#region tblStyle5 TEXTBLOCK-->
			<Setter Property="Background" Value="Bisque"/>
			<Setter Property="Foreground" Value="White"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background" Value="Yellow"/>
					<Setter Property="Foreground" Value="White"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion tblStyle5 TEXTBLOCK-->

		<Style x:Key="tblStyle6" TargetType="{x:Type TextBlock}">
	<!--#region lblStyle6 TEXTBLOCK-->
			<Setter Property="Background" Value="AliceBlue"/>
			<Setter Property="Foreground" Value="Red"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="AntiqueWhite"/>
					<Setter Property="Foreground" Value="Black"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion lblStyle6 TEXTBLOCK-->

		<Style x:Key="lblStyle4" TargetType="{x:Type Label}">
	<!--#region lblStyle4 LABEL-->
			<Setter Property="Foreground" Value="Blue"/>
			<Setter Property="FontSize" Value="14"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Green"/>
					<Setter Property="Foreground" Value="White"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<!--#endregion lblStyle4 LABEL-->

		<!--Cute Label style that makes field Grow in size and Font-->
		<Style x:Key="lblStyle5" TargetType="{x:Type Label}">
	<!--#region lblStyle5 LABEL-->
			<Setter Property="Foreground" Value="Red"/>
			<Setter Property="FontSize" Value="14"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red"/>
					<Setter Property="Foreground" Value="White"/>
					<Setter Property="FontWeight" Value="Bold"/>
					<Setter Property="Height" Value="40"/>
					<Setter Property="Width" Value="100"/>
					<Setter Property="FontSize" Value="18"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion lblStyle5 Label-->

		<DataTemplate x:Key="dtStyle1">
			<!--Cute DataTemplate used in 1st Listview with Gridview inside-->
	<!--#region DataTemplate for use in LISTVIEW/GRIDVIEW-->
			<Grid Background="Green" >
				<Grid.RowDefinitions>
					<RowDefinition Height="45"/>
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="45"/>
					<ColumnDefinition Width="35"/>
					<ColumnDefinition Width="55"/>
					<ColumnDefinition Width="85"/>
					<ColumnDefinition Width="65"/>
					<ColumnDefinition Width="65"/>
					<ColumnDefinition Width="*"/>
				</Grid.ColumnDefinitions>
				

				<Image Source="{Binding UserPic}"									  
						Grid.Column="0" 
						VerticalAlignment="Center"/>
				<TextBlock Grid.Column="1" Height="45" Width="35"
						 VerticalAlignment="Center" Padding="10"
						 Text="{Binding Age}" Style="{StaticResource tblStyle5}"/>
				<TextBlock Grid.Column="2" Height="45"  Width="55"
						 VerticalAlignment="Center" Padding="10"
						 Text="{Binding Forename}" Style="{StaticResource tblStyle5}"/>
				<TextBlock Grid.Column="3"  Height="45" Width="85"
						 VerticalAlignment="Center" Padding="10"
						 Text="{Binding Surname}" Style="{StaticResource tblStyle5}"/>
				<TextBlock Grid.Column="4"  Height="45" Width="65"
						 VerticalAlignment="Center" Padding="10"
						 Text="{Binding Salary}"
						 Style="{StaticResource tblStyle5}"/>
				<TextBlock Grid.Column="5"  Height="45" Width="65"
						 VerticalAlignment="Center" Padding="10"
						 Text="{Binding MonthsEmployed}" Style="{StaticResource tblStyle5}"/>
				<TextBlock Grid.Column="6"  Height="45" Width="555"
						 VerticalAlignment="Center" Padding="10"
						 Text=""/>
			</Grid>
		</DataTemplate>
	<!--#endregion DataTemplate for use in ListView/GridView-->

		<!--Cute TextBox style that makes field Grow in size and Font
		AND it stays like that to allow editing until it looses focus again-->
		<Style x:Key="tbxStyle1" TargetType="{x:Type TextBox}">
	<!--#region tbxStyle1- TEXTBOX-->
			<Setter Property="Foreground" Value="DarkGreen"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="HorizontalAlignment" Value="Center"/>
			<Setter Property="VerticalAlignment" Value="Center"/>
			<Setter Property="BorderBrush" Value="Red"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Gray"/>
					<Setter Property="Foreground" Value="White"/>
					<Setter Property="BorderThickness" Value="3"/>
					<Setter Property="BorderBrush" Value="Black"/>
					<Setter Property="HorizontalAlignment" Value="Center"/>
					<Setter Property="TextAlignment" Value="Center"/>
					<Setter Property="FontWeight" Value="Bold"/>
					<Setter Property="Height" Value="40"/>
					<Setter Property="Width" Value="100"/>
					<Setter Property="FontSize" Value="18"/>
				</Trigger>
				<Trigger Property="IsSelectionActive" Value="true">
					<Setter Property="Background" Value="White"/>
					<Setter Property="Foreground" Value="Red"/>
					<Setter Property="HorizontalAlignment" Value="Center"/>
					<Setter Property="FontWeight" Value="Bold"/>
					<Setter Property="Height" Value="40"/>
					<Setter Property="Width" Value="100"/>
					<Setter Property="FontSize" Value="18"/>
 				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion tbxStyle1- TextBox-->

		<Style x:Key="HideBorder" TargetType="{x:Type Border}">
	<!--#region HideBorder - BORDER-->
			<Setter Property="Background" Value="White"/>
			<Setter Property="BorderBrush" Value="LightBlue"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion HideBorder - Border-->

		<Style x:Key="spnlStyle" TargetType="{x:Type StackPanel}">
	<!--#region spnStyle1 STACKPANEL -->
			<Setter Property="Background" Value="Gray"/>
			<Setter Property="HorizontalAlignment" Value="Stretch"/>
			<Setter Property="Width" Value="auto"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Green"/>
					<Setter Property="HorizontalAlignment" Value="Stretch"/>
					<Setter Property="Width" Value="auto"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion spnlStyle1 Stackpanel -->

		<!--Default Template for Items inside Listview
		It seems we can only do this in resources, and cannot 
		give it an x:Key  as we cannot seem to add a Style to ListViewItem-->
		<Style x:Key="lvStyle1" TargetType="{x:Type ListViewItem}">
	<!--#region lvStyle1  LISTVIEWITEM-->
			<Setter Property="Background" Value="Red"/>
			<Setter Property="Foreground" Value="White"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Yellow"/>
					<Setter Property="Foreground" Value="Black"/>
					<Setter Property="FontWeight" Value="Bold"/>
				</Trigger>
			</Style.Triggers>
		</Style>
	<!--#endregion lvStyle1 -->

		<Style x:Key="{x:Type ListViewItem}" TargetType="{x:Type ListViewItem}">
	<!--#region {ListViewItem}-->
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Padding" Value="2,0" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type ListViewItem}">
						<Grid>
							<Border x:Name="outerBorder" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="2" 
                            SnapsToDevicePixels="true">
								<Grid>
									<Border x:Name="innerBorder" 
                                Background="{TemplateBinding Background}" 
                                BorderThickness="1" 
                                CornerRadius="1" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="true" />
									<GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Grid>
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter TargetName="outerBorder" Property="BorderBrush" Value="Black" />
								<Setter TargetName="innerBorder" Property="Background" Value="Black" />
								<Setter TargetName="innerBorder" Property="BorderBrush" Value="Black" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<!--#endregion {ListViewItem}-->

		<Style x:Key="lbItems99" TargetType="TextBlock">
	<!--#region Style99-->
			<!--This is a crazy overkill that changes colors in a 
			Textblock as you mouse over different fields in the Item-->
			<Setter Property="Foreground" Value="Red" />
			<Setter Property="Height" Value="25" />
			<Setter Property="Width" Value="75" />
			<Style.Triggers>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding ElementName=tb0, Path=IsMouseOver}" Value="True" />
						<!--<Condition Binding="{Binding ElementName=tb2, Path=IsMouseOver}" Value="True" />-->
						<!--<Condition Binding="{Binding ElementName=tb3, Path=IsMouseOver}" Value="True" />
						<Condition Binding="{Binding ElementName=tb4, Path=IsMouseOver}" Value="True" />-->
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<Setter Property="Background" Value="LightBlue" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="FontWeight" Value="Bold" />
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding ElementName=tb1, Path=IsMouseOver}" Value="True" />
						<!--<Condition Binding="{Binding ElementName=tb2, Path=IsMouseOver}" Value="True" />-->
						<!--<Condition Binding="{Binding ElementName=tb3, Path=IsMouseOver}" Value="True" />
						<Condition Binding="{Binding ElementName=tb4, Path=IsMouseOver}" Value="True" />-->
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<Setter Property="Background" Value="DarkBlue" />
						<Setter Property="Foreground" Value="White" />
						<Setter Property="FontWeight" Value="Bold" />
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding ElementName=tb2, Path=IsMouseOver}" Value="True" />
						<!--<Condition Binding="{Binding ElementName=tb2, Path=IsMouseOver}" Value="True" />-->
						<!--<Condition Binding="{Binding ElementName=tb3, Path=IsMouseOver}" Value="True" />
						<Condition Binding="{Binding ElementName=tb4, Path=IsMouseOver}" Value="True" />-->
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<Setter Property="Background" Value="SteelBlue" />
						<Setter Property="Foreground" Value="Red" />
						<Setter Property="FontWeight" Value="Bold" />
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding ElementName=tb3, Path=IsMouseOver}" Value="True" />
						<!--<Condition Binding="{Binding ElementName=tb2, Path=IsMouseOver}" Value="True" />-->
						<!--<Condition Binding="{Binding ElementName=tb3, Path=IsMouseOver}" Value="True" />
						<Condition Binding="{Binding ElementName=tb4, Path=IsMouseOver}" Value="True" />-->
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<Setter Property="Background" Value="LightGray" />
						<Setter Property="Foreground" Value="Black" />
						<Setter Property="FontWeight" Value="Bold" />
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
			</Style.Triggers>
		</Style>
<!--#endregion Style99-->

	</Page.Resources>

	<!--*********************-->
	<!--END OF PAGE RESOURCES-->
	<!--*********************-->

	<!--MAIN GRID-->
	<Grid Height="auto">


		<!--#region grid setup
		5 Rows + 7 Cols-->
		<Grid.Background>
			<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
				<GradientStop Color="#E7CDE5" Offset="0"/>
				<GradientStop Color="#F11BE7" Offset="0.972"/>
			</LinearGradientBrush>
		</Grid.Background>

		<Grid.RowDefinitions>
			<RowDefinition Height="10"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="150"/>
			<RowDefinition Height="55"/>
			<RowDefinition Height="10"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="10"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="10"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="10"/>
		</Grid.ColumnDefinitions>
		<!--Vertical Splitter-->
		<GridSplitter 
			Grid.Column="3"
			Width="5"
		    HorizontalAlignment="Stretch"/>

		<!--Grid HorizontalSplitter -->
		<GridSplitter 
		    Grid.Row="2"
		    Height="5" 
		    HorizontalAlignment="Stretch"/>

		<!--#endregion grid setup-->

		<!--Control 1 >Left-->
		<Grid
			Grid.Row="1"
			Grid.Column="1"
			Grid.ColumnSpan="2"
			Grid.RowSpan="1"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch"			
			Height="auto"
			MinHeight="150">

			<!--This one works - So far, displays a bunch of labels
			 for each Property of the Data.
			The Data/Context to "allStaff" is set in Page Resources above-->
			<ListView x:Name="lLabelView"
					VerticalAlignment="Stretch"
						Margin="5"
					 DataContext="{StaticResource allStaff}" ItemsSource="{Binding}" >
				<!--NB It seems we MUST use the Data format of the line above to get the bindings to work in here-->
				
				<!--These are very different to ListBoxes, and to use styles we have to jump thru lots of hoops
				Here I have put the Styling sections up front above the data display code
				-->
				<ListView.Resources>

					<!--We have to do this to format the Column headers-->
					<Style TargetType="{x:Type GridViewColumnHeader}">
						<!--This one works fine -->
						<Setter Property="HorizontalContentAlignment" Value="Left"/>
						<Setter Property="Foreground" Value="Red"/>
						<Setter Property="FontWeight" Value="Bold"/>
						<Setter Property="FontStyle" Value="Italic"/>
						<Style.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="Red"/>
							<Setter Property="Foreground" Value="Black"/>
						</Trigger>
						</Style.Triggers>
					</Style>


					<!-- We can format almost anything we might wish to format here -->
					<!--This one works completely on TextBlock-->
					<Style TargetType="{x:Type TextBlock}">
						<!--Set TextBlock items Colors here-->
						<!--WORKING-->
						<Setter Property="Background" Value="bisque" />
						<!--WORKING-->
						<Setter Property="Foreground" Value="Black" />
									<!--WORKING-->
						<Setter Property="Width" Value="75" />
						<Style.Triggers>
							<!--This highlights the selected field in our TextBlocks 
								below as Black text on Bisque background on MouseOver
							because the data fields use a Bisque Background -->
							<Trigger Property="IsMouseOver" Value="True">
								<!--WORKING-->
								<Setter Property="Background" Value="Bisque"/>
								<!--WORKING-->
								<Setter Property="Foreground" Value="Red"/>
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="true"/>
									<Condition Property="IsKeyboardFocused" Value="true"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<!--WORKING-->
									<Setter Property="Background" Value="Bisque"/>
									<!--NOT WORKING-->
									<Setter Property="Foreground" Value="Green"/>
								</MultiTrigger.Setters>
							</MultiTrigger>
							
						</Style.Triggers>
					</Style>


				</ListView.Resources>
				<!--This WORKS for Background and Gives a Red Background on MouseOver and a Yellow 
					Background when selected for this control only as it is declared locally to it
					Foreground is ignored for some reason -->
				<ListView.ItemContainerStyle>
					<Style TargetType="{x:Type ListViewItem}">
						<Setter Property="Background" Value="blue"/>
						<!--Foreground does NOT WORK-->
						<Setter Property="Foreground" Value="Red" />

						<Style.Triggers>
							<Trigger Property="IsMouseOver" Value="true">
								<Setter Property="Background" Value="Orange"/>
								<!--Foreground does NOT WORK-->
								<Setter Property="Foreground" Value="Green" />
							</Trigger>
							<Trigger Property="IsSelected" Value="true">
								<Setter Property="Background" Value="Red"/>
								<!--Foreground does NOT WORK-->
								<Setter Property="Foreground" Value="White" />
							</Trigger>
							<MultiTrigger>
								<MultiTrigger.Conditions>
									<Condition Property="IsMouseOver" Value="true"/>
									<Condition Property="IsSelected" Value="true"/>
								</MultiTrigger.Conditions>
								<MultiTrigger.Setters>
									<Setter Property="Background" Value="Bisque"/>
								</MultiTrigger.Setters>
							</MultiTrigger>

						</Style.Triggers>
					</Style>

				</ListView.ItemContainerStyle>

				<ListView.View >
					<!--FINALLY, we get to set out the Data itself-->			
					<GridView >
						<!--Predefined data template - see above - not used right now-->
						<!--<GridViewColumn Header="                Age  1st Name     Surname            Salary         Employed for:" Width="355"
						 CellTemplate="{StaticResource dtStyle1}"/>-->
						
						<GridViewColumn Header="Image" Width="50">						
						<!--We do NOT need DisplayMemberTemplate for an Image-->						
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<Image Source="{Binding Path=UserPic}"									  
									  Height="42" Width="42"/>
							</DataTemplate>
						</GridViewColumn.CellTemplate>
					</GridViewColumn>

						 <!--COLUMN SORTING VERSION - NB TAG name MUST be the data Field Name if the sort is going to work-->
						<GridViewColumn  Width="75" DisplayMemberBinding="{Binding Surname}" >
							<GridViewColumnHeader Tag="Surname" Click="GridViewColumnHeader_Click">Surname</GridViewColumnHeader>
							<GridViewColumn.CellTemplate >
								<DataTemplate >
									<TextBlock Width="15" Height="55"
										Text="{Binding Surname}" Style="{StaticResource tblStyle5}"/>
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</GridViewColumn>


						<GridViewColumn  Width="75" DisplayMemberBinding="{Binding Age}" >
							<GridViewColumnHeader Tag="Age" Click="GridViewColumnHeader_Click">Age</GridViewColumnHeader>
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock  Width="175"
											  Text="{Binding Age}"  Margin="8,8,8,8" Style="{StaticResource tblStyle5}"/>
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</GridViewColumn>

						<GridViewColumn  Width="75" DisplayMemberBinding="{Binding MonthsEmployed}" >
							<GridViewColumnHeader Tag="MonthsEmployed" Click="GridViewColumnHeader_Click">Employed</GridViewColumnHeader>
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock  Width="175"
										Text="{Binding MonthsEmployed}" Style="{StaticResource tblStyle5}"/>
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</GridViewColumn>

						<GridViewColumn  Width="75" DisplayMemberBinding="{Binding Salary}" >
							<GridViewColumnHeader Tag="Salary" Click="GridViewColumnHeader_Click">Salary</GridViewColumnHeader>
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock  Width="275"
										Text="{Binding Salary}" Style="{StaticResource tblStyle5}"/>
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</GridViewColumn>

					</GridView>
				</ListView.View>
			</ListView>
		</Grid>

		<!--Control 2 >Left-->
		<Grid
			Grid.Row="2"
			Grid.Column="1"
			Grid.ColumnSpan="2"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch"
			Grid.RowSpan="1"
			Height="auto"
			MinHeight="150">

			<!--This one did work, doesn't now-->
			<ListBox x:Name="lView9"
				Background="Blue"
					Foreground="White"
					FontSize="18"
					Margin="5"
					VerticalAlignment="Stretch"
					HorizontalAlignment="Stretch"
					DataContext="{StaticResource allStaff}" ItemsSource="{Binding}" 					
					>
				<!--This makes the selected row visible when window looses focus - works on any grid-->				
				<ListBox.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</ListBox.Resources>
				
				<ListBox.ItemTemplate >
					<DataTemplate>
						<StackPanel Orientation="Horizontal" Width="544">
							<Image x:Name="tb0" Source="{Binding UserPic}" Width="25" Height="25" Margin="5"/>
							<TextBlock x:Name="tb1" Text="{Binding Forename}" 
									 Style="{StaticResource lbItems99}"/>
							<TextBlock x:Name="tb2" Text="{Binding Surname}" 
									 Style="{StaticResource lbItems99}"/>
							<TextBlock x:Name="tb3" Text="{Binding Age}" 
									 Style="{StaticResource lbItems99}"/>
							<TextBlock x:Name="tb4" Text="{Binding Path=MonthsEmployed}" 
								Style="{StaticResource lbItems99}"/>
							<TextBlock x:Name="tb5" Text="{Binding Path=Salary}" 
								Style="{StaticResource lbItems99}">
							</TextBlock>

						</StackPanel>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>

		</Grid>

		<!--Control 3 >Left-->
		<Grid
			Grid.Row="3"
			Grid.Column="1"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch"
			Grid.RowSpan="1"
			Grid.ColumnSpan="2"
			Height="auto"
			Margin="5"
			MinHeight="150">

			<ListBox x:Name="lBox1"
				    Background="LightGray"
					Foreground="Black"
					FontSize="18"
				    PreviewMouseLeftButtonDown="ListBox_MouseDown" SelectionChanged="ListBox_SelectionChanged"	
				    DataContext="{StaticResource allStaff}" ItemsSource="{Binding}"	>
				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<ListBox.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</ListBox.Resources>

				<ListBox.ItemTemplate>
					<DataTemplate >
						<!--We are using TWO Styles here, one for StackPanel, 
						the other for the Label inside it - Works just fine -->
						<StackPanel Orientation="Horizontal" Style="{StaticResource spnlStyle}" Width="995">
							<Image Source="{Binding UserPic}" Height="45" Width="45"/>
							<Label Content="{Binding Surname}" Style="{StaticResource lblStyle5}"/>
							<TextBox Text="{Binding Age, UpdateSourceTrigger=PropertyChanged}"  Style="{StaticResource tbxStyle1}"/>
							<!--// Combination field - but it works....-->
							<TextBlock Grid.Column="4" Text="{Binding Fullname}"
								Width="125" Height="18" 
								FontSize="14" FontWeight="Bold" 
								Margin="5" 
								Style="{StaticResource tblStyle6}"/>
						</StackPanel>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
		</Grid>

		<!--Right Column-->


		<!--Control 1 Right-->
		<Grid
			Grid.Row="1"
			Grid.Column="4"
			Grid.ColumnSpan="2"
			Grid.RowSpan="2"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch"			
			Height="auto"
			MinHeight="150"
			>
			<ListView x:Name="TstLstView" Background="Gray"
					Foreground="White"
					VerticalAlignment="Stretch"
					BorderBrush="White" BorderThickness="3"
					Width="auto"
					Height="auto"
					MinHeight="80"
					MinWidth="250"
						Margin="5,5,5,0"
					DataContext="{StaticResource people}" ItemsSource="{Binding}" >
				
				<ListView.ItemTemplate>
					<DataTemplate>
						<Grid HorizontalAlignment="Left" VerticalAlignment="Center">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="55"/>
								<ColumnDefinition Width="35"/>
								<ColumnDefinition Width="105"/>
								<ColumnDefinition Width="125"/>
								<ColumnDefinition Width="215"/>
							</Grid.ColumnDefinitions>
						<!--<WrapPanel Orientation="Horizontal">-->
							<!--<Image Height="18" Width="18" Source="/Images/ian.jpg" />-->
							<Image Grid.Column="0" Source="{Binding Path=UserPic}" Height="35" Width="35" Margin="5"/>
							<!--This formats the Id as Right justified-->
							<TextBlock Grid.Column="1"  Text="{Binding EmployeeId}"
									HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" 	
									Height="18" Width="25" FontSize="12" FontWeight="Normal" Margin="7"/>
							<TextBox Grid.Column="2" Text="{Binding EmployeeFirstName, UpdateSourceTrigger=PropertyChanged}"
									    Height="24" FontSize="14" FontWeight="Bold" Margin="5"/>
							<TextBox Grid.Column="3" Text="{Binding EmployeeLastName, UpdateSourceTrigger=PropertyChanged}"
								   Height="24" FontSize="14" FontWeight="Bold" Margin="5"/>
							<Border Grid.Column="4" BorderBrush="Black" BorderThickness="1" Padding="1,1,1,1" Margin="9" Style="{StaticResource HideBorder}">
								<!--<WrapPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" >-->

								<TextBlock Grid.Column="4" Text="{Binding FullName}"
										Width="85" Height="18" FontSize="14" FontWeight="Bold" Margin="5" Style="{StaticResource tblStyle6}"/>
								
								<!--<TextBlock Text="{Binding EmployeeFirstName}"
									 Width="85" Height="18" FontSize="14" FontWeight="Bold" Margin="5" Foreground="DarkKhaki" Style="{StaticResource tblStyle6}"/>
								<TextBlock Text="{Binding EmployeeLastName}"
									Width="85" Height="18" FontSize="14" FontWeight="Bold" Margin="5" Foreground="DarkKhaki" Style="{StaticResource tblStyle6}"/>-->
								<!--</WrapPanel>-->
							</Border>
						</Grid>
					</DataTemplate>
				</ListView.ItemTemplate>
				<!--This WORKS for Background and Gives a Red Background on MouseOver and a Yellow 
					Background when selected for this control only as it is declared locally to it
					Foreground is ignored for some reason -->
				<ListView.ItemContainerStyle>
					<Style TargetType="{x:Type ListViewItem}">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ListViewItem}">
									<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										 Background="{TemplateBinding Background}">
										<ContentPresenter />
									</Border>
									<ControlTemplate.Triggers>
										<!--<Trigger Property="IsSelected" Value="True">
												<Setter Property="Background" Value="{StaticResource BackgroundSelected}" />
												<Setter Property="Foreground" Value="{StaticResource ForegroundSelected}" />
											</Trigger>-->
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="Background" Value="{StaticResource BackgroundMouseOver}" />
											<Setter Property="Foreground" Value="{StaticResource ForegroundMouseOver}" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>

					</Style>


				</ListView.ItemContainerStyle>

				<!--<ListView.ItemTemplate>
					<DataTemplate>
						<WrapPanel>
							<TextBlock Text="{Binding Forename}" Foreground="White"/>
							<TextBlock Text="{Binding Surname}" Foreground="White"/>
							<TextBlock Text="{Binding Age}" Foreground="White"/>
							<TextBlock Text="{Binding Salary}" Foreground="White"/>
							<TextBlock Text="{Binding MonthsEmployed}" Foreground="White"/>
						</WrapPanel>
					</DataTemplate>
				</ListView.ItemTemplate>-->
			</ListView>
		</Grid>

		<!--Control 2 Right-->
		<Grid
			Grid.Row="3"
			Grid.Column="4"
			Grid.ColumnSpan="2"
			Grid.RowSpan="2"
			VerticalAlignment="Stretch"
			HorizontalAlignment="Stretch"			
			Height="auto"
			MinHeight="150"
			>
			<ListView x:Name="TstLstView5" Background="Gray"
					Foreground="White"
					VerticalAlignment="Stretch"
					BorderBrush="White" BorderThickness="3"
					Width="auto"
					Height="auto"
					MinHeight="80"
					MinWidth="250"
						Margin="5,5,5,0"
					DataContext="{StaticResource people}" ItemsSource="{Binding}" >

				<ListView.ItemTemplate>
					<DataTemplate>
						<Grid HorizontalAlignment="Left" VerticalAlignment="Center">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="55"/>
								<ColumnDefinition Width="35"/>
								<ColumnDefinition Width="105"/>
								<ColumnDefinition Width="125"/>
								<ColumnDefinition Width="215"/>
							</Grid.ColumnDefinitions>
							<!--<WrapPanel Orientation="Horizontal">-->
							<!--<Image Height="18" Width="18" Source="/Images/ian.jpg" />-->
							<Image Grid.Column="0" Source="{Binding Path=UserPic}" Height="26" Width="26" Margin="5"/>
							<!--This formats the Id as Right justified-->
							<TextBlock Grid.Column="1"  Text="{Binding EmployeeId}"
									HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" 										  
									Height="18" Width="25" FontSize="16" FontWeight="Normal" Margin="7"/>
							<TextBox Grid.Column="2" Text="{Binding EmployeeFirstName, UpdateSourceTrigger=PropertyChanged}"
									    Height="20" FontSize="14" FontWeight="Bold" Margin="5"/>
							<TextBox Grid.Column="3" Text="{Binding EmployeeLastName, UpdateSourceTrigger=PropertyChanged}"
								   Height="20" FontSize="14" FontWeight="Bold" Margin="5"/>
							<Border Grid.Column="4" BorderBrush="Black" BorderThickness="1" Padding="1,1,1,1" Margin="9" Style="{StaticResource HideBorder}">
								<!--<WrapPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center" >-->

								<TextBlock Grid.Column="4" Text="{Binding FullName}"
										Width="85" Height="18" FontSize="14" FontWeight="Bold" Margin="5" Style="{StaticResource tblStyle6}"/>

								<!--<TextBlock Text="{Binding EmployeeFirstName}"
									 Width="85" Height="18" FontSize="14" FontWeight="Bold" Margin="5" Foreground="DarkKhaki" Style="{StaticResource tblStyle6}"/>
								<TextBlock Text="{Binding EmployeeLastName}"
									Width="85" Height="18" FontSize="14" FontWeight="Bold" Margin="5" Foreground="DarkKhaki" Style="{StaticResource tblStyle6}"/>-->
								<!--</WrapPanel>-->
							</Border>
						</Grid>
					</DataTemplate>
				</ListView.ItemTemplate>
				<!--This WORKS for Background and Gives a Red Background on MouseOver and a Yellow 
					Background when selected for this control only as it is declared locally to it
					Foreground is ignored for some reason -->
				<ListView.ItemContainerStyle>
					<Style TargetType="{x:Type ListViewItem}">
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ListViewItem}">
									<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										 Background="{TemplateBinding Background}">
										<ContentPresenter />
									</Border>
									<ControlTemplate.Triggers>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="Background" Value="{StaticResource TextBoxBackground}" />
											<Setter Property="Foreground" Value="{StaticResource ForegroundMouseOver}" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>

					</Style>


				</ListView.ItemContainerStyle>
	
			</ListView>
		</Grid>
	</Grid>
</Page>