<Window x:Class="WPFPages.SqlDbViewer"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	  mc:Ignorable="d"
	  DataContext="{Binding RelativeSource={RelativeSource Self}}"
		Title="Database Edit/View Utility"
		Height="550" Width="867"
		MinHeight="450" MinWidth="867"
		Left="1050"
		Loaded="OnWindowLoaded"
		Top="20"
		WindowStartupLocation="Manual"
		WindowStyle="None"
		BorderThickness="0"
		GotFocus="Window_GotFocus"
		MouseDown="Window_MouseDown"
		PreviewKeyDown="Window_PreviewKeyDown"
		Closed="Window_Closed">
	<!--d:DataContext="{d:DesignInstance Type=local:BankAccount}"-->

	<!--Never gets called - I use Mousedown to achieve this
	GotFocus ="Window_GotFocus"-->
	<!--<Style x:Key="HWhiteBlackGradientBackgroundStyle" TargetType="Button" >-->

	<Window.Resources>

		<Style x:Key="ButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2"
							     SnapsToDevicePixels="true"
							     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							     StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="HWhiteBlackGradientBackgroundStyle" TargetType="{x:Type Button}"  >
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<Setter Property="FontSize" Value="14" />
			<Setter Property="FontWeight" Value="DemiBold" />

			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
						<GradientStop Color="AliceBlue" Offset="0" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>

			<Setter Property="Foreground">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="AliceBlue" Offset="0" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
								<GradientStop Color="Red" Offset="0" />
								<GradientStop Color="White" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="Foreground">
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Red" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>

				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Red" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>

				<Trigger Property="IsEnabled" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Black" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="Foreground">
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Red" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>



		<Style x:Key="ButtonStyle9" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<!--<Setter Property="Background" Value="Yellow"/>-->
			<!--<Setter Property="Foreground" Value="MediumBlue"/>-->
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="White" Offset="1" />
						<GradientStop Color="Black" Offset="0" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Setter Property="Foreground">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="White" Offset="0" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>

			<Setter Property="BorderBrush" Value="Red"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false">

								<Setter Property="Background">
									<Setter.Value>
										<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
											<GradientStop Color="White" Offset="0" />
											<GradientStop Color="DarkGray" Offset="1" />
										</LinearGradientBrush>
									</Setter.Value>
								</Setter>

								<Setter Property="Foreground">
									<Setter.Value>
										<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
											<GradientStop Color="AliceBlue" Offset="1" />
											<GradientStop Color="Red" Offset="0" />
										</LinearGradientBrush>
									</Setter.Value>
								</Setter>

								<!--<Setter Property="Background" Value="Green"/>-->
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>





		<Style x:Key="ToggleBkGrndOnmouseover" TargetType="Button">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
								<GradientStop Color="Red" Offset="0" />
								<GradientStop Color="DarkOrange" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--Another Ellipse as a button-->
		<Style x:Key="ellip" TargetType="Button">
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="Width" Value="200" />
			<Setter Property="Height" Value="25" />
			<Setter Property="Background" Value="Green" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="FontWeight" Value="Medium" />
			<Setter Property="VerticalAlignment" Value="Top" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="HorizontalContentAlignment" Value="Right" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Content" Value="Black Text" />
			<!--Set to true to not get any properties from the themes.-->
			<!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Grid
							Height="80"
							Width="180">
							<Ellipse
								Grid.Row="0"
								Grid.Column="0"
								Width="180"
								Height="77"
								Fill="LightGreen" />
							<ContentPresenter HorizontalAlignment="Center"
										VerticalAlignment="Center" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--How to OVERRIDE the default styling (of a button in this case)
		 so that we can still set Back/Foreground and border colors in the button itself
		but still have mouseover etc working correctly-->

		<Style x:Key="GridColumnHeadersStyle" TargetType="DataGridColumnHeader">
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="Foreground" Value="{StaticResource Black0}" />
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint=".8,1" EndPoint=".1,0.93">
						<GradientStop Color="Red" Offset="3.1" />
						<GradientStop Color="DarkOrange" Offset="0.5" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<!--This handles the button being set on Mouse over -->
				<Trigger Property="IsEnabled" Value="True">
					<Setter Property="Foreground"  Value="{StaticResource Black1}" />
					<Setter Property="FontWeight"  Value="Bold" />
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint=".5,0.63" EndPoint=".5,1">
								<GradientStop Color="Green" Offset="0" />
								<GradientStop Color="White" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="RedToBlack" TargetType="DataGridColumnHeader">
			<!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="Foreground" Value="{StaticResource Black0}" />
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0.5" EndPoint=".5,.6">
						<GradientStop Color="Red" Offset="1" />
						<GradientStop Color="DarkOrange" Offset="0" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<!--These do nothing at all, but the do demonstrate how to use
			the {Binding xxx} to pass user defined values thru-->
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="Red" Offset="0" />
						<GradientStop Color="#FFFFD190" Offset="1" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
								<GradientStop Color="#F9A68B" Offset="0" />
								<GradientStop Color="#6B1D04" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>


		<Style x:Key="gradientblue" TargetType="TextBlock">
			<Setter Property="Background" Value="{StaticResource HeaderBrushBlue}" />
			<Setter Property="Foreground" Value="White" />
			<!--<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushBlue}" />-->
			<!--<Setter Property="BorderThickness" Value="1" />-->
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<!--<Setter Property="HorizontalContentAlignment" Value="Center" />-->
			<!--<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />-->
			<!--<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushBlue}" />
				</Trigger>
			</Style.Triggers>-->
		</Style>

		<Style x:Key="HeaderStyleBlue" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushBlue}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushBlue}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushBlue}" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="HeaderStyleGreen" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushGreen}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushGreen}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushGreen}" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="HeaderStyleYellow" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushYellow}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushYellow}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushYellow}" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--<Style x:Key="CenterText" TargetType="TextBox">
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="VerticalAlignment" Value="Center" />
			<Setter Property="Foreground" Value="Red" />
		</Style>-->
		<!--Test of downloaded Datagrid column header Style-->
	</Window.Resources>

	<Grid GotFocus="Window_GotFocus"
		Visibility="Visible">

		<Grid.RowDefinitions>
			<RowDefinition Height="5" />
			<RowDefinition Height="30" />
			<RowDefinition Height="25" />
			<RowDefinition Height="55" />
			<RowDefinition Height="65" />
			<RowDefinition Height="*" />
			<RowDefinition Height="65" />
			<RowDefinition Height="5" />
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="10" />
			<ColumnDefinition Width="3.5*" />
			<ColumnDefinition Width="110" />
			<ColumnDefinition Width="175" />
			<ColumnDefinition Width="10" />
		</Grid.ColumnDefinitions>
		<Grid.Background>
			<!--create an elegant left to right light-> Dark gradient as a background-->
			<LinearGradientBrush EndPoint="0.0,1" StartPoint="1.3,0">
				<GradientStop Color="#333333" Offset="0" />
				<GradientStop Color="LightGray" Offset="0.97" />
			</LinearGradientBrush>
		</Grid.Background>

		<Canvas
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.Row="1"
			>
			<Canvas.Background>
				<!--create an elegant left to right light-> Dark gradient as a background-->
				<LinearGradientBrush EndPoint="0,1" StartPoint="1,0">
					<GradientStop Color="#333333" Offset="0" />
					<GradientStop Color="LightGray" Offset="0.97" />
				</LinearGradientBrush>
			</Canvas.Background>


		</Canvas>
		<Menu
			Background="Transparent"
			Grid.Column="1"
			Grid.ColumnSpan="2"
			Grid.Row="1"
			Height="30"
			Margin="0,3"
			HorizontalAlignment="Left"
			HorizontalContentAlignment="Left"
			Width="auto">
			<!--<Menu.Background>
				-->
			<!--create an elegant left to right light-> Dark gradient as a background-->
			<!--
				<LinearGradientBrush EndPoint="0,1" StartPoint="1,0">
					<GradientStop Color="#333333" Offset="1" />
					<GradientStop Color="#35F6FB" Offset="0" />
				</LinearGradientBrush>
			</Menu.Background>-->

			<MenuItem  Header="_Linq Queries"
				     Margin="2"
				     FontWeight="Bold"
					Width="80"
				    Foreground="{StaticResource Black1}">
				<MenuItem Header="A/c Type 1 Only"
					    Background="#35F6FB"
					    Click="Linq1_Click"
					    Foreground="Black"
					    IsCheckable="false"/>
				<MenuItem Header="A/c Type 2 Only"
					Background="#35F6FB"
					Click="Linq2_Click"
					Foreground="Black"
					    IsCheckable="false"/>
				<MenuItem Header="A/c Type 3 Only"
					Background="#35F6FB"
					Click="Linq3_Click"
					Foreground="Black"
					    IsCheckable="false"/>
				<MenuItem Header="A/c Type 4 Only"
					Background="#35F6FB"
					Click="Linq4_Click"
					Foreground="Black"
				    IsCheckable="false"/>
				<MenuItem Header="Multi A/C Holders"
					Background="#35F6FB"
					Click="Linq5_Click"
					    IsCheckable="false"
				Foreground="Black"/>
				<Separator />
				<MenuItem Header="Show All records"
					Background="#35F6FB"
					Click="Linq6_Click"
					    IsCheckable="false"
				Foreground="Black"/>
			</MenuItem>

			<MenuItem  Header="Filter"
				    Click="Filter_Click"
				     FontWeight="DemiBold"
					Width="60"
				     Margin="2"
				    Foreground="{StaticResource Black1}">
				<!--<MenuItem Header="Setup Filter"
					    Background="#35F6FB"
					    Click="Filter_Click"
					    Foreground="Black"
					    IsCheckable="false"/>-->
			</MenuItem>
			<MenuItem  Header="Options"
				    Click="Options_Click"
					Width="70"
				    Foreground="{StaticResource White2}">
			</MenuItem>

			<MenuItem  Header="Close Viewer..."
				    Click="Exit_Click"
				     FontWeight="SemiBold"
				     Margin="2,0"
					Width="97"
				    Foreground="{StaticResource White1}">
				<!--<MenuItem Header="Setup Filter"
					    Background="#35F6FB"
					    Click="Filter_Click"
					    Foreground="Black"
					    IsCheckable="false"/>-->
			</MenuItem>

		</Menu>

		<!--#region Checkboxes-->
		<WrapPanel
				Grid.Column="1"
				Grid.Row="1"
				Grid.RowSpan="1"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Right"
				Margin="10,10,0,-5"
				Orientation="Horizontal">
			<!--<CheckBox
				x:Name="Id_option"
				Content="A/c Id#"
				FontWeight="Normal"
				Foreground="{StaticResource Black4}"
				Width="70"
				Height="35"
				Click="Id_option_Click" />
			<CheckBox
				x:Name="Custno_option"
				Content="Customer #"
				FontWeight="Medium"
				Foreground="{StaticResource Black2}"
				Width="100"
				Height="35"
				Click="Custno_option_Click" />
			<CheckBox
				x:Name="Bankno_option"
				Content="Bank #"
				Width="70"
				FontWeight="DemiBold"
				Foreground="{StaticResource Black0}"
				Height="35"
				Click="Bankno_option_Click" />
			<CheckBox
				x:Name="actype_option"
				Content="A/c Type #"
				FontWeight="Normal"
				Foreground="{StaticResource Gray4}"
				Width="90"
				Height="35"
				Click="actype_option_Click" />
			<CheckBox
				x:Name="Dob_option"
				Content="Birthday"
				FontWeight="DemiBold"
				Foreground="{StaticResource White1}"
				Width="80"
				Height="35"
				Click="Dob_option_Click" />
			<CheckBox
				x:Name="Odate_option"
				Content="A/c Opened"
				FontWeight="DemiBold"
				Foreground="{StaticResource White0}"
				Width="100"
				Height="35"
				Click="Odate_option_Click" />
			<CheckBox
				x:Name="Cdate_option"
				Content="A/c Closed"
				FontWeight="Bold"
				Foreground="{StaticResource White0}"
				Width="100"
				Height="35"
				Click="Cdate_option_Click" />
			<CheckBox
				x:Name="Default_option"
				Content="Default"
				FontWeight="Bold"
				Foreground="{StaticResource White0}"
				IsChecked="True"
				Width="100"
				Height="35"
				Click="Default_option_Click" />-->
			<CheckBox
				x:Name="LinkRecords"
				Content="Link ALL Viewers"
				FontWeight="Bold"
				Foreground="{StaticResource White3}"
				IsChecked="False"
				Margin="5,-3,39,0"
				Width="100"
				Height="35"
				Click="LinkRecords_Click " />
		</WrapPanel>
		<!--#endregion Checkboxes-->

		<!--#region  buttonbar-->

		<TextBlock x:Name="ViewerBanner"
				Grid.Row="2"
				Grid.Column="1"
				Grid.RowSpan="1" Grid.ColumnSpan="3"
				Foreground="Red"
				Background="Aqua"
				TextAlignment="Center"
				FontWeight="Bold"
				Text="SQL DATABASE VIEWER - This Grid allows full editing capability, and will update the SQL source in real time" />

		<Button
				Background="{StaticResource HeaderBrushGray}"
				Click="Minimize_click"
				Content="-v-"
				Foreground="White"
				Grid.Column="3"
				Grid.Row="1"
				Height="20"
			HorizontalAlignment="Right"
				MouseDown="Window_MouseDown"
				Opacity="50"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				VerticalContentAlignment="Top"
				Visibility="Visible"
				Width="20">
		</Button>
		<WrapPanel
				Grid.Column="1"
				Grid.ColumnSpan="3"
				Grid.Row="3"
				Grid.RowSpan="1"
				HorizontalAlignment="Right"
				Margin="10"
				Orientation="Horizontal">
			<!--#region Buttons-->

			<!--Open new Db viewer Button-->
			<!--
			<Button x:Name="Duplicate" Width="85" Height="35" Margin="1"
				IsEnabled="true"
				Click="LoadNewViewer_Click"
				FontWeight="DemiBold"
				Content="New Viewer"
				Background="{StaticResource HeaderBrushGray}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateGray}">
			</Button>-->

			<!--Filter to multi a/c Button-->
			<Button x:Name="Edit" Width="65" Height="35" Margin="1"
				Background="{StaticResource HeaderBrushGray}"
				Click="Edit_Click"
				Content="Edit"
				FontWeight="DemiBold"
				Foreground="White"
				IsEnabled="true"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
 />
			<Button
				x:Name="Filters"
				Background="{StaticResource HeaderBrushGray}"
				Click="SetFilter_Click"
				Content="Filtering"
				FontWeight="DemiBold"
				Foreground="White"
				Height="35"
				IsEnabled="true"
				Margin="1"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				Width="65" />
			<!--Multi Account Button-->
			<Button x:Name="Multiaccounts" Width="125" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				Click="Multiaccs_Click"
				FontWeight="DemiBold"
				Background="{StaticResource HeaderBrushGray}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				MouseDown="Window_MouseDown"
				Content="Multiple A/c's Only">
			</Button>
			<Border x:Name="splitter" Width="5" Height="35" Margin="5,0,5,0"
				IsEnabled="true"
				Background="{StaticResource Orange1}"
				BorderBrush="Black"
				BorderThickness="1" />

			<!--Bank Account Button-->
			<Button x:Name="ShowBank" Width="130" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				   Tag="true;"
				Click="ShowBank_Click"
				Content="Bank A/c's (0)"
				MouseDown="Window_MouseDown"
				Background="{StaticResource HeaderBrushBlue}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateBlue}" />

			<!--Customer Account Button-->
			<Button x:Name="ShowCust" Width="145" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				Click="ShowCust_Click"
				Background="{StaticResource HeaderBrushYellow}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateYellow}"
				MouseDown="Window_MouseDown"
				Content="Customer A/c's (0)" />

			<!--Details Account Button-->
			<Button x:Name="ShowDetails" Width="125" Height="35" Margin="1"
				IsEnabled="true"
				Focusable="True"
				Click="ShowDetails_Click"
				MouseDown="Window_MouseDown"
				Background="{StaticResource HeaderBrushGreen}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateGreen}"
				Content="Details A/c's  (0)">
			</Button>
			<!--Close Window Button-->
			<Button x:Name="CloseViewer"
				Width="85" Height="35" Margin="1"
				FontSize="11"
				IsEnabled="true"
				Focusable="True"
				Content="Close Viewer"
				MouseDown="Window_MouseDown"
				Background="{StaticResource HeaderBrushRed}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateRed}"
				Click="CloseViewer_Click">
			</Button>
			<!--#endregion Buttons-->
		</WrapPanel>
		<!--#endregion  buttonbar-->

		<Grid
			Grid.Column="1"
			Grid.Row="5"
			Grid.ColumnSpan="3"
			Grid.RowSpan="1"
			>
			<WrapPanel
				x:Name="WaitMessage"
				Background="ForestGreen"
				Height="200"
				Orientation="Vertical"
				Width="600"
				Visibility="Visible" Margin="0,0,0,0" >

				<TextBlock
					FontSize="26"
					Foreground="White"
					Height="87"
					HorizontalAlignment="Center"
					TextAlignment="Center"
					VerticalAlignment="Top"
					Margin="80,52,62,0"
					Text="Please wait, Connected to SQL Server to Load Database data...."
					TextWrapping="Wrap"
					Width="450"/>
			</WrapPanel>


		</Grid>

		<Grid Grid.Row="4"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<!--b:DataGridBehaviour.FullRowSelect="true"-->
			<!--#region BankAccount data Grid-->
			<DataGrid x:Name="BankGrid"
				AlternatingRowBackground="{StaticResource Blue4}"
				AutoGenerateColumns="False"
				BeginningEdit="BankGrid_BeginningEdit"
				BorderBrush="{StaticResource Blue3}"
				BorderThickness="0"
				CanUserAddRows="False"
				CanUserSortColumns="False"
				CellEditEnding="BankGrid_CellEditEnding"
				ColumnHeaderHeight="25"
				ColumnHeaderStyle ="{StaticResource HeaderStyleBlue}"
				GotFocus="BankGrid_GotFocus"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Stretch"
				IsEnabled="true"
				IsSynchronizedWithCurrentItem="false"
				MouseRightButtonDown="BankGrid_MouseRightButtonDown"
				PreviewMouseDown="BankGrid_PreviewMouseDown"
				RowEditEnding="ViewerGrid_RowEditEnding"
				RowHeight="27"
				ScrollBar.Scroll="BankGrid_Scroll"
				ScrollViewer.ScrollChanged="BankGrid_ScrollChanged"
				SelectedCellsChanged="BankGrid_SelectedCellsChanged"
				SelectionChanged="ItemsView_OnSelectionChanged"
				SelectionMode="Single"
				SelectionUnit="FullRow"
				TabIndex="1"
				TargetUpdated="BankGrid_TargetUpdated"
				VerticalAlignment="Stretch"
				VerticalGridLinesBrush="{StaticResource Blue2}"
				VirtualizingPanel.ScrollUnit="Pixel"
				Visibility="Collapsed"
				    >
				<!--VirtualizingPanel.ScrollUnit="Pixel"-->
				<!--PreviewMouseDown="BankGrid_PreviewMouseDown"-->

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB" />
				</DataGrid.Resources>

				<!--Not implemented just yet-->
				<!--
					<ContextMenu>
						<MenuItem Header="Add New Row"  Click="ContextMenu1_Click" />
						<MenuItem Header="Delete current Row"  Click="ContextMenu2_Click" />
						<MenuItem Header="Find ..."  Click="ContextMenuFind_Click" />
						<Separator />
							<MenuItem Header="Close Viewer"  Click="ContextMenu3_Click" />
					</ContextMenu>
				</DataGrid.ContextMenu>-->

				<DataGrid.Columns>
					<DataGridTemplateColumn Header="Id" Width="40"
									x:Name="ID">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock
									Text="{Binding Id}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>

					<DataGridTextColumn Header="Customer #" Binding="{Binding CustNo,
									Mode=TwoWay,
									UpdateSourceTrigger=PropertyChanged}">
					</DataGridTextColumn>

					<DataGridTextColumn Header="Bank #" Width="80"
									Binding ="{Binding BankNo,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}">
					</DataGridTextColumn>

					<DataGridTextColumn Header="Type" Width="40"
									Binding="{Binding AcType,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}" />

					<DataGridTextColumn Header="Balance" Width="90"
									Binding="{Binding Balance,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus,
									StringFormat='£ ##,###,###.00'}" />

					<!--<DataGridTemplateColumn Header="IntRate" Width="50">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding IntRate, StringFormat='#.##', Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}"
								   HorizontalAlignment="Center"
										   VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<TextBox Text="{Binding IntRate}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>-->

					<DataGridTextColumn Header="Interest" Width="60"
									Binding="{Binding IntRate, Mode=TwoWay,
									UpdateSourceTrigger=LostFocus,
									StringFormat='0.00'}" />

					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="Open Date" Width="80">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=ODate,
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=ODate,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}">
								</DatePicker>
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>

					<DataGridTemplateColumn Header="Close Date" Width="80">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=CDate,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>
				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion BankAccount data Grid-->
		</Grid>



		<Grid Grid.Row="4"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="727*" />
				<ColumnDefinition Width="65*" />
			</Grid.ColumnDefinitions>

			<!--#region Customers data Grid-->
			<DataGrid x:Name="CustomerGrid"
				AlternatingRowBackground="{StaticResource Yellow3}"
				AutoGenerateColumns="False"
				BeginningEdit="CustomerGrid_BeginningEdit"
				BorderBrush="{StaticResource Yellow3}"
				BorderThickness="2"
				CanUserAddRows="false"
				CanUserSortColumns="False"
				CellEditEnding="CustomerGrid_CellEditEnding"
				ColumnHeaderHeight="25"
				ColumnHeaderStyle ="{StaticResource HeaderStyleYellow}"
				GotFocus="CustomerGrid_GotFocus"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Stretch"
				IsEnabled="true"
				IsSynchronizedWithCurrentItem="true"
				MouseRightButtonDown="CustomerGrid_MouseRightButtonDown"
				PreviewMouseDown="CustomerGrid_PreviewMouseDown"
				RowEditEnding="ViewerGrid_RowEditEnding"
				RowHeight="27"
				ScrollBar.Scroll="CustomerGrid_Scroll"
				ScrollViewer.ScrollChanged="CustomerGrid_ScrollChanged"
				SelectedCellsChanged="CustomerGrid_SelectedCellsChanged"
				SelectionChanged="ItemsView_OnSelectionChanged"
				SelectionMode="Single"
				SelectionUnit="FullRow"
				TabIndex="2"
				TargetUpdated="CustomerGrid_TargetUpdated"
				VerticalAlignment="Stretch"
				VerticalGridLinesBrush="{StaticResource Orange0}"
				VirtualizingPanel.ScrollUnit="Pixel"
				Visibility="Collapsed"
				>

				<!--MouseDown="CustomerGrid_MouseDown"-->
				<!--VerticalContentAlignment="Center"-->
				<!--PreparingCellForEdit="CustomerGrid_PreparingCellForEdit"-->
				<!--Initialized="CustomerGrid_Initialized_1"-->
				<!--SourceUpdated="CustomerGrid_SourceUpdated"-->

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB" />
				</DataGrid.Resources>

				<DataGrid.Columns>
					<!--Force column to be Read only-->
					<DataGridTemplateColumn Header="Id" Width="40">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Id}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<DataGridTextColumn Header="Customer #" Width="70"
									Binding="{Binding CustNo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Bank #" Width="70"
									Binding="{Binding BankNo, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="Type" Width="30"
									Binding="{Binding AcType, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="First Name" Width="80"
									Binding="{Binding FName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Surname" Width="80"
									Binding="{Binding LName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Address 1" Width="130"
									Binding="{Binding Addr1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Address 2" Width="120"
									Binding="{Binding Addr2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Town" Width="80"
									Binding="{Binding County, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="County" Width="70"
									Binding="{Binding County, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="PostCode" Width="80"
									Binding="{Binding PCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Phone #" Width="80"
									Binding="{Binding Phone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Mobile" Width="80"
									Binding="{Binding Mobile, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Birthday" Width="80"
									Binding="{Binding Dob, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,StringFormat='dd/MM/yyyy'}" />
					<DataGridTextColumn Header="A/c Opened"
									Binding ="{Binding Path=ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,StringFormat='dd/MM/yyyy'}" />
					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="A/c Closed" Width="80">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
									StringFormat='dd/MM/yyyy'}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<!--<DataGridTemplateColumn Header="Close Date" Width="80">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=CDate,
									Mode=TwoWay,
									UpdateSourceTrigger=PropertyChanged}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>-->
				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion Customers data Grid-->
		</Grid>


		<Grid Grid.Row="4"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<!--#region DetailsViewModel data Grid-->
			<DataGrid x:Name="DetailsGrid"
				    
				AlternatingRowBackground="{StaticResource Green3}"
				AutoGenerateColumns="False"
				BeginningEdit="DetailsGrid_BeginningEdit"
				BorderBrush="{StaticResource Green3}"
				BorderThickness="2"
				CanUserAddRows="false"
				CanUserSortColumns="False"
				CellEditEnding="DetailsGrid_CellEditEnding"
				ColumnHeaderHeight="25"
				ColumnHeaderStyle ="{StaticResource HeaderStyleGreen}"
				GotFocus="DetailsGrid_GotFocus"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Stretch"
				IsEnabled="true"
				IsSynchronizedWithCurrentItem="true"
				MouseRightButtonDown="DetailsGrid_MouseRightButtonDown"
				PreviewMouseDown="DetailsGrid_PreviewMouseDown_1"
				RowEditEnding="ViewerGrid_RowEditEnding"
				RowHeight="27"
				ScrollBar.Scroll="DetailsGrid_Scroll"
				ScrollViewer.ScrollChanged="DetailsGrid_ScrollChanged"
				SelectedCellsChanged="DetailsGrid_SelectedCellsChanged"
				SelectionChanged="ItemsView_OnSelectionChanged"
				SelectionMode="Single"
				SelectionUnit="FullRow"
				TabIndex="3"
				TargetUpdated="DetailsGrid_TargetUpdated"
				VerticalAlignment="Stretch"
				VerticalGridLinesBrush="{StaticResource Green0}"
				VirtualizingPanel.ScrollUnit="Pixel"
				Visibility="Collapsed"
				    >

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB" />
				</DataGrid.Resources>

				<DataGrid.Columns>
					<DataGridTemplateColumn Header="Id" Width="40">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Id}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<DataGridTextColumn Header="Customer #" Width="80"
									Binding="{Binding CustNo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Bank #" Width="80"
									Binding="{Binding BankNo, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="Type" Width="40"
									Binding="{Binding AcType, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="Balance" Width="90"
									SortMemberPath="Balance"
									Binding="{Binding Balance,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus,
									StringFormat='£##,###,###.00'}" />
					<DataGridTextColumn Header="Interest" Width="60"
									SortMemberPath="IntRate"
									Binding="{Binding IntRate, Mode=TwoWay,
									StringFormat='##.00 ',
									UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="A/c Opened"
									Binding ="{Binding Path=ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
									StringFormat='dd/MM/yyyy'}" />
					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="A/c Closed" Width="80" SortMemberPath="CDate">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
									StringFormat='dd/MM/yyyy'}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>

				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion DetailsViewModel data Grid-->
		</Grid>
		<Grid
			Grid.Row="6"
			Grid.Column="0"
			Grid.ColumnSpan="4"
			HorizontalAlignment="Right"
			VerticalAlignment="Center"
			Height="45"
			>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="120"/>
				<ColumnDefinition Width="160"/>
			</Grid.ColumnDefinitions>

			<TextBlock
				x:Name="Count"
				Background="DarkGray"
				FontSize="14"
				FontWeight="DemiBold"
				Foreground="Red"
				Grid.Row="1"
				Grid.Column="1"
				Height="40"
				HorizontalAlignment="Right"
				Margin="5,5,5,5"
				Padding="10"
				Text="Count"
				TextAlignment="Center"
				VerticalAlignment="Center"
				Width="100"
				/>
			<Button
					x:Name="RefreshBtn"
					Background="{StaticResource HeaderBrushGray}"
					Foreground="White"
					Click="Refresh_Click"
					Content="Refresh"
					Grid.Row="1"
					Grid.Column="2"
					IsEnabled="True"
					Height="40"
					HorizontalAlignment="Center"
					Margin="5,1,5,0"
					Template="{StaticResource HorizontalGradientTemplateGray}"
					VerticalAlignment="Center"
					Width="150"
		>
			</Button>
		</Grid>
		<TextBlock
				x:Name="StatusBar"
				Background="Beige"
				Foreground="Black"
				Grid.Column="1"
				Grid.Row="6"
				Height="30"
				HorizontalAlignment="Stretch"
				Margin="0,5,5,5"
				Padding="6"
				Style="{StaticResource gradientblue}"
				Text="Status comments "
				TextAlignment="Center"
				VerticalAlignment="Center"
				/>

	</Grid>
</Window>
