<Window x:Class="WPFPages.SqlDbViewer"
	  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:dateconv="clr-namespace:WPFPages.MyConvertors"
	  xmlns:data="clr-namespace:WPFPages"
	  mc:Ignorable="d"
		MinHeight="450"
		MinWidth="877"
		Loaded="OnWindowLoaded"	
	  PreviewMouseRightButtonDown="Window_PreviewMouseRightButtonDown"
	  PreviewMouseRightButtonUp="Window_PreviewMouseRightButtonUp"
	  PreviewMouseMove="Window_PreviewMouseMove"
		PreviewKeyDown="Window_PreviewKeyDown"
		Title="Database Edit/View Utility" 
		Height="450" Width="867"
		WindowStartupLocation="CenterScreen"
		Closed="Window_Closed"
	  Background="Cyan"
		WindowStyle="ThreeDBorderWindow">
	<!--DataContext="{Binding RelativeSource={RelativeSource Self}}"-->



	<!--Title="Database Edit/View Utility"Title="Database Edit/View Utility"
		Height="550" Width="867"
		MinHeight="450" MinWidth="867"
		Left="1050"
		Loaded="OnWindowLoaded"
		Top="20"
		WindowStartupLocation="Manual"
		WindowStyle="None"
		BorderThickness="2"
		GotFocus="Window_GotFocus"
		MouseDown="Window_MouseDown"
		PreviewKeyDown="Window_PreviewKeyDown"
		Closed="Window_Closed">-->


	<Window.Resources>

		<dateconv:DateTimeToShortStringConverter x:Key="DateConvert"/>
		<dateconv:NumericString2ShortDateConverter x:Key="NumberToDateConvert"/>
		<dateconv:Date2UTCConverter x:Key="Date2UTCConvert"/>
		<dateconv:UniversalValueConverter x:Key="UniversalConvert"/>

		<ContextMenu x:Key="ContextMenu1">
			<MenuItem 
				Name ="linq1" Header="Linq Queries"  
				    Foreground="{StaticResource White0}"
				    FontSize="16"
					Background="Blue">

				<!--Style="{StaticResource Mitem1}"-->
				<MenuItem Header="AC Type 1 Only" 
					    Click="Linq1_Click"
				    Foreground="{StaticResource White0}"
				    Background="{StaticResource Blue1}"/>
				<MenuItem Header="AC Type 2 Only" 
					    Click="Linq2_Click"
				    Foreground="{StaticResource Red1}"
				    Background="{StaticResource Blue3}"/>
				<MenuItem Header="AC Type 3 Only" 
					    Click="Linq3_Click"
				    Foreground="{StaticResource Red2}"
				    Background="{StaticResource Blue3}"/>
				<MenuItem Header="AC Type 4 Only" 
					    Click="Linq4_Click"
				    Foreground="{StaticResource Red3}"
				    Background="{StaticResource Blue3}"/>

				<Separator Style="{StaticResource Menu_Separator}"/>

				<MenuItem Header="Multiple A/c holders Only" 
					    Click="Linq5_Click"
				    Foreground="{StaticResource White0}"
				    Background="Blue"/>
				<MenuItem Header="Show All A/c's" 
					    Click="Linq6_Click"
				    Foreground="{StaticResource White0}"
				    Background="Blue"/>

			</MenuItem>
			<Separator Style="{StaticResource Menu_Separator}"/>

			<MenuItem Header="View currently selected record in JSON Format"  
				    Background="{StaticResource Green3}"
				    FontSize="16"
				    Click="ViewJsonRecord_Click"
				   >
				<MenuItem.Icon>
					<Image Source="/Icons/symlink_directory_30px.png"  />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Header="Edit currently Selected Account" 
				    Background="{StaticResource Green3}"
				    Click="ContextEdit_Click"
				    FontSize="16"
				>
				<MenuItem.Icon>
					<Image Source="/Icons/mailbox-receive-message.png" />
				</MenuItem.Icon>
			</MenuItem>
			<Separator Style="{StaticResource Menu_Separator}"/>
			<MenuItem Header="Save current Grid Db data as JSON File"  
				    Background="{StaticResource Green0}"
				    Foreground="{StaticResource White0}"
				    FontSize="16"
				    Click="ContextSave_Click">
				<MenuItem.Icon>
					<Image Source="/Icons/symlink_directory_30px.png"  />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Header="Create/Save and View JSON File for this Db Grid"  
    				    Background="{StaticResource Green0}"
				    Foreground="{StaticResource White0}"
				    FontSize="16"
				    Click="ContextDisplayJsonData_Click" >
				<MenuItem.Icon>
					<Image Source="/Icons/wifi.png"  />
				</MenuItem.Icon>
			</MenuItem>
			<Separator Style="{StaticResource Menu_Separator}"/>
			<MenuItem Header="                                Settings" Click="ContextSettings_Click" 
				    Background="{StaticResource Blue1}" Foreground="White"
    				    FontSize="16">
				<MenuItem.Icon>
					<Image Source="/Icons/phone-lock.png"  />
				</MenuItem.Icon>
			</MenuItem>
			<MenuItem Header="                            Exit this Viewer" Click="ContextClose_Click" Background="{StaticResource Red1}" 
				    FontSize="16"
				    Foreground="White"
				    >
				<MenuItem.Icon>
					<Image Source="/Icons/document-delete_48x48.png"  />
				</MenuItem.Icon>
			</MenuItem>

			<!--<ContextMenu.Resources>
				<Style x:Key="Cm1" TargetType="{x:Type MenuItem}">
					<Setter Property="Background" Value="{StaticResource Red3}"/>
					<Style.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="Green"/>
							<Setter Property="Foreground" Value="Blue"/>
						</Trigger>
					</Style.Triggers>
				</Style>
			</ContextMenu.Resources>-->
			
		</ContextMenu>


		<Style x:Key="ButtonFocusVisual">
			<Setter Property="Control.Template">
				<Setter.Value>
					<ControlTemplate>
						<Rectangle Margin="2"
							     SnapsToDevicePixels="true"
							     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
							     StrokeThickness="1" StrokeDashArray="1 2"/>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="HWhiteBlackGradientBackgroundStyle" TargetType="{x:Type Button}"  >
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<Setter Property="FontSize" Value="14" />
			<Setter Property="FontWeight" Value="DemiBold" />

			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
						<GradientStop Color="AliceBlue" Offset="0" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>

			<Setter Property="Foreground">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="AliceBlue" Offset="0" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>

			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
								<GradientStop Color="Red" Offset="0" />
								<GradientStop Color="White" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="Foreground">
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Red" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>

				<Trigger Property="IsEnabled" Value="False">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Red" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>

				<Trigger Property="IsEnabled" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Black" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
					<Setter Property="Foreground">
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
								<GradientStop Color="AliceBlue" Offset="0" />
								<GradientStop Color="Red" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="ButtonStyle9" TargetType="{x:Type Button}">
			<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
			<!--<Setter Property="Background" Value="Yellow"/>-->
			<!--<Setter Property="Foreground" Value="MediumBlue"/>-->
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="White" Offset="1" />
						<GradientStop Color="Black" Offset="0" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Setter Property="Foreground">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="White" Offset="0" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>

			<Setter Property="BorderBrush" Value="Red"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="HorizontalContentAlignment" Value="Center"/>
			<Setter Property="VerticalContentAlignment" Value="Center"/>
			<Setter Property="Padding" Value="1"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid>
							<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="false">

								<Setter Property="Background">
									<Setter.Value>
										<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
											<GradientStop Color="White" Offset="0" />
											<GradientStop Color="DarkGray" Offset="1" />
										</LinearGradientBrush>
									</Setter.Value>
								</Setter>

								<Setter Property="Foreground">
									<Setter.Value>
										<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
											<GradientStop Color="AliceBlue" Offset="1" />
											<GradientStop Color="Red" Offset="0" />
										</LinearGradientBrush>
									</Setter.Value>
								</Setter>

								<!--<Setter Property="Background" Value="Green"/>-->
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="ToggleBkGrndOnmouseover" TargetType="Button">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
								<GradientStop Color="Red" Offset="0" />
								<GradientStop Color="DarkOrange" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--Another Ellipse as a button-->
		<Style x:Key="ellip" TargetType="Button">
			<Setter Property="OverridesDefaultStyle" Value="true" />
			<Setter Property="Width" Value="200" />
			<Setter Property="Height" Value="25" />
			<Setter Property="Background" Value="Green" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="FontWeight" Value="Medium" />
			<Setter Property="VerticalAlignment" Value="Top" />
			<Setter Property="HorizontalAlignment" Value="Center" />
			<Setter Property="HorizontalContentAlignment" Value="Right" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="Content" Value="Black Text" />
			<!--Set to true to not get any properties from the themes.-->
			<!--<Setter Property="OverridesDefaultStyle" Value="True" />-->
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="Button">
						<Grid
							Height="80"
							Width="180">
							<Ellipse
								Grid.Row="0"
								Grid.Column="0"
								Width="180"
								Height="77"
								Fill="LightGreen" />
							<ContentPresenter HorizontalAlignment="Center"
										VerticalAlignment="Center" />
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!--How to OVERRIDE the default styling (of a button in this case)
		 so that we can still set Back/Foreground and border colors in the button itself
		but still have mouseover etc working correctly-->

		<Style x:Key="GridColumnHeadersStyle" TargetType="DataGridColumnHeader">
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="Foreground" Value="{StaticResource Black0}" />
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint=".8,1" EndPoint=".1,0.93">
						<GradientStop Color="Red" Offset="3.1" />
						<GradientStop Color="DarkOrange" Offset="0.5" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<!--This handles the button being set on Mouse over -->
				<Trigger Property="IsEnabled" Value="True">
					<Setter Property="Foreground"  Value="{StaticResource Black1}" />
					<Setter Property="FontWeight"  Value="Bold" />
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint=".5,0.63" EndPoint=".5,1">
								<GradientStop Color="Green" Offset="0" />
								<GradientStop Color="White" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="RedToBlack" TargetType="DataGridColumnHeader">
			<!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="Foreground" Value="{StaticResource Black0}" />
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0.5" EndPoint=".5,.6">
						<GradientStop Color="Red" Offset="1" />
						<GradientStop Color="DarkOrange" Offset="0" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<!--These do nothing at all, but the do demonstrate how to use
			the {Binding xxx} to pass user defined values thru-->
			<Setter Property="Background">
				<Setter.Value>
					<LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
						<GradientStop Color="Red" Offset="0" />
						<GradientStop Color="#FFFFD190" Offset="1" />
						<GradientStop Color="Black" Offset="1" />
					</LinearGradientBrush>
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property="Background">
						<Setter.Value>
							<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
								<GradientStop Color="#F9A68B" Offset="0" />
								<GradientStop Color="#6B1D04" Offset="1" />
							</LinearGradientBrush>
						</Setter.Value>
					</Setter>
				</Trigger>
			</Style.Triggers>
		</Style>


		<Style x:Key="gradientblue" TargetType="TextBlock">
			<Setter Property="Background" Value="{StaticResource HeaderBrushBlue}" />
			<Setter Property="Foreground" Value="White" />
			<!--<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushBlue}" />-->
			<!--<Setter Property="BorderThickness" Value="1" />-->
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<!--<Setter Property="HorizontalContentAlignment" Value="Center" />-->
			<!--<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />-->
			<!--<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushBlue}" />
				</Trigger>
			</Style.Triggers>-->
		</Style>

		<Style x:Key="HeaderStyleBlue" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushBlue}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushBlue}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="True">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushBlue}" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key="HeaderStyleGreen" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushGreen}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushGreen}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushGreen}" />
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="HeaderStyleYellow" TargetType="DataGridColumnHeader">
			<Setter Property="Background" Value="{StaticResource HeaderBrushYellow}" />
			<Setter Property="Foreground" Value="White" />
			<Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrushYellow}" />
			<Setter Property="BorderThickness" Value="1" />
			<Setter Property="SnapsToDevicePixels" Value="True" />
			<Setter Property="HorizontalContentAlignment" Value="Center" />
			<Setter Property="MinWidth" Value="0" />
			<Setter Property="MinHeight" Value="30" />
			<Setter Property="Cursor" Value="Hand" />
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property= "Background" Value="{StaticResource HeaderBorderBrushYellow}" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--Test of downloaded Datagrid column header Style-->
	</Window.Resources>



	<Grid x:Name="sqlgrid" GotFocus="Window_GotFocus"
		Visibility="Visible" ForceCursor="True" OverridesDefaultStyle="True" UseLayoutRounding="True">
		<Grid.FocusVisualStyle>
			<Style/>
		</Grid.FocusVisualStyle>

		<Grid.RowDefinitions>
			<RowDefinition Height="5" />
			<RowDefinition Height="40" />
			<RowDefinition Height="25" />
			<RowDefinition Height="57" />
			<RowDefinition Height="65" />
			<RowDefinition Height="*" />
			<RowDefinition Height="50" />
			<RowDefinition Height="5" />
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="10" />
			<ColumnDefinition Width="3.5*" />
			<ColumnDefinition Width="110" />
			<ColumnDefinition Width="175" />
			<ColumnDefinition Width="10" />
		</Grid.ColumnDefinitions>
		<Grid.Background>
			<!--create an elegant left to right light-> Dark gradient as a background-->
			<LinearGradientBrush EndPoint="0.0,1" StartPoint="1.3,0">
				<GradientStop Color="#333333" Offset="0" />
				<GradientStop Color="LightGray" Offset="0.97" />
			</LinearGradientBrush>
		</Grid.Background>


		<!--#region Menu Bar-->

		<Menu
			Grid.Row="1"
			Grid.Column="1"
			Width="auto"
			Height="30"
			IsTabStop="True"
			Margin="5"
			HorizontalAlignment="Left"
			Background="Transparent">

			<!--// Menu Header-->
			<MenuItem Header="_Linq Queries"
				Width="80"
				Foreground="{StaticResource White0}">

				<!--// Seperate menu items in DropDown-->
				<MenuItem Header="A/c Type 1 Only"
						Background="#35F6FB"
						Click="Linq1_Click"
						Foreground="Black"						
						IsCheckable="false" />
				<MenuItem Header="A/c Type 2 Only"
						Background="#35F6FB"
						Click="Linq2_Click"
						Foreground="Black"						
						IsCheckable="False" />
				<MenuItem Header="A/c Type 3 Only"
						Background="#35F6FB"
						Click="Linq3_Click"
						Foreground="Black"						
						IsCheckable="False" />
				<MenuItem Header="A/c Type 4 Only"
						Background="#35F6FB"
						Click="Linq4_Click"
						Foreground="Black"						
						IsCheckable="False" />
				
				<Separator />

				<MenuItem Header="All Records"
						Background="#35F6FB"
						Click="Linq6_Click"
						Foreground="Black"						
						IsCheckable="False" />
				<Separator />
				<MenuItem
						Background="#35F6FB"
						Click="Linq5_Click"
						Foreground="Black"
						Header="Multi A/C Holders"
						IsCheckable="False" />

				</MenuItem>

				<!--// Seperate menu items at top level -->
			<MenuItem
				Width="60"
				Click="Filter_Click"
				Foreground="{StaticResource White0}"
				Header="Filtering">

				<MenuItem
				Width="50"
				Click="Options_Click"
				Foreground="{StaticResource White1}"
				Header="Options" />

				<MenuItem
				Width="50"
				Click="Exit_Click"
				Foreground="{StaticResource White1}"
				Header="Exit..." />

				<MenuItem  Header="Drag / Drop"
				Click="Drag_Click"
			     IsTabStop="False"
				Width="81"
				Foreground="{StaticResource White1}"/>

				<MenuItem  Header="Close Viewer..."
				    Click="Exit_Click"
				     FontWeight="SemiBold"
				     Margin="2,0"
					Width="97"
				    Foreground="{StaticResource White1}"/>
			</MenuItem>
		</Menu>

		<!--#endregion Menu Bar-->


		<!--#region Checkboxes-->
		<WrapPanel
			Background="Transparent"
				Grid.Column="1"
				Grid.Row="1"
				Grid.RowSpan="2"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Right"
				Margin="0,9,0,21"
				Orientation="Horizontal">
			<CheckBox
				x:Name="TopMostOption"
				Content="Keep on Top"
				IsChecked="False"
				FontWeight="Bold"
				Foreground="{StaticResource White3}"
				Margin="15,-3,45,0"
				Width="121"
				Height="35"
				Click="TopMost_Click" />
			<CheckBox
				x:Name="LinkRecords"
				Content="Link ALL Viewers"
				FontWeight="Bold"
				Foreground="{StaticResource White3}"
				IsChecked="False"
				Margin="-45,-3,48,0"
				Width="121"
				Height="35"
				Click="LinkRecords_Click " />
		</WrapPanel>
		<!--#endregion Checkboxes-->

		<!--#region  buttonbar-->

		<TextBlock x:Name="ViewerBanner"
				Grid.Row="2"
				Grid.Column="1"
				Grid.RowSpan="1" Grid.ColumnSpan="3"
				Foreground="Red"
				Background="Aqua"
				TextAlignment="Center"
				FontWeight="Bold"
				Text="SQL DATABASE VIEWER - This Grid allows full editing capability, and will update the SQL source in real time" />

		<Button
				Background="{StaticResource HeaderBrushGray}"
				Click="Minimize_click"
				Content="-v-"
				Foreground="White"
				Grid.Column="3"
				Grid.Row="1"
				Height="20"
			HorizontalAlignment="Right"
				MouseDown="Window_MouseDown"
				Opacity="50"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				VerticalContentAlignment="Top"
				Visibility="Visible"
				Width="20">
		</Button>

		<Grid
			Grid.Row="3"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="300"/>
				<ColumnDefinition Width="200"/>
			</Grid.ColumnDefinitions>

			<WrapPanel
				Grid.Column="0"
				Grid.ColumnSpan="1"
				Grid.Row="1"
				Grid.RowSpan="1"
				HorizontalAlignment="Left"
				Margin="0,11,0,0"
				Orientation="Horizontal">
				<!--#region Buttons-->

				<!--Open new Db viewer Button-->
				<!--Filter to multi a/c Button-->
				<Button x:Name="Edit" Width="75" Height="35" 
				Background="{StaticResource HeaderBrushGray}"
				Click="Edit_Click"
				Content="Edit"
				FontWeight="DemiBold"
				Foreground="White"
				  Grid.Row="0"
				  Grid.Column="0"
				  Grid.ColumnSpan="1"
				IsEnabled="true"
				  Margin="0,0,0,0"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
 />
				<Button
				x:Name="Filters"
				Background="{StaticResource HeaderBrushGray}"
				Click="SetFilter_Click"
				Content="Filtering"
				FontWeight="DemiBold"
				Foreground="White"
				  Grid.Row="0"
				  Grid.Column="0"
				  Grid.ColumnSpan="1"
				Height="35"
				IsEnabled="true"
				  Margin="5,0,0,0"
				MouseDown="Window_MouseDown"
				Template="{StaticResource HorizontalGradientTemplateGray}"
				Width="75" />

				<!--Multi Account Button-->
				<Button x:Name="Multiaccounts" Width="125" Height="35" 
				IsEnabled="true"
				Focusable="True"
				Click="Multiaccs_Click"
				FontWeight="DemiBold"
				Background="{StaticResource HeaderBrushGray}"
				Foreground="White"
				  Grid.Row="0"
				  Grid.Column="0"
				  Grid.ColumnSpan="1"				Template="{StaticResource HorizontalGradientTemplateGray}"
				  Margin="5,0,0,0"
				MouseDown="Window_MouseDown"
				Content="Multiple A/c's Only">
				</Button>

			</WrapPanel>

			<!--Right hand button group-->
			<WrapPanel
				Grid.Column="1"
				Grid.ColumnSpan="1"
				Grid.RowSpan="1"
				HorizontalAlignment="Right"
				Margin="0,-1,-347,0"
				Orientation="Horizontal">

				<Border 
				Width="5" Height="35" 
				IsEnabled="true"
				Background="{StaticResource Orange1}"
				  Grid.Row="0"
				  Grid.Column="0"
				  Grid.ColumnSpan="1"				
				  Margin="-75,14,-40,0"
				BorderBrush="Black"
				BorderThickness="1" />
				<!--Bank Account Button-->
				<Button x:Name="ShowBank" Width="130" Height="35" 
				IsEnabled="true"
				Focusable="True"
				   Tag="true;"
				Click="ShowBank_Click"
				Content="Bank A/c's (0)"
				  Margin="-2,12,0,0"
				MouseDown="Window_MouseDown"
				Background="{StaticResource HeaderBrushBlue}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateBlue}" />

				<!--Customer Account Button-->
				<Button x:Name="ShowCust" Width="145" Height="35"
				IsEnabled="true"
				Focusable="True"
				Click="ShowCust_Click"
				  Background="{StaticResource HeaderBrushYellow}"
				Foreground="White"
				  Margin="10,12,0,0"
				Template="{StaticResource HorizontalGradientTemplateYellow}"
				MouseDown="Window_MouseDown"
				Content="Customer A/c's (0)" />

				<!--Details Account Button-->
				<Button x:Name="ShowDetails" 
				  Margin="6,12,0,0"
				  Width="125" Height="35" 
				IsEnabled="true"
				Focusable="True"
				Click="ShowDetails_Click"
				MouseDown="Window_MouseDown"
				  Background="{StaticResource HeaderBrushGreen}"
				Foreground="White"
				Template="{StaticResource HorizontalGradientTemplateGreen}"
				Content="Details A/c's  (0)">
				</Button>

				<Border 
				  Margin="6,12,0,0"
				Width="5" Height="35" 
				IsEnabled="true"
				Background="{StaticResource Orange1}"
				BorderBrush="Black"
				BorderThickness="1" />

				<Button
					x:Name="RefreshBtn"
				  Margin="10,12,15,0"
					Background="{StaticResource HeaderBrushGray}"
					Foreground="White"
					Click="Refresh_Click"
					Content="Refresh"
				IsEnabled="True"
					Height="35"
					HorizontalAlignment="Center"
					Template="{StaticResource HorizontalGradientTemplateGray}"
					VerticalAlignment="Center"
					Width="81"/>
				<!--#endregion Buttons-->
			</WrapPanel>
		</Grid>
		<!--#endregion  buttonbar-->

		<Grid
			Grid.Column="1"
			Grid.Row="5"
			Grid.ColumnSpan="3"
			Grid.RowSpan="1"
			>
			<WrapPanel
				x:Name="WaitMessage"
				Background="ForestGreen"
				Height="200"
				Orientation="Vertical"
				Width="600"
				Visibility="Visible" Margin="0,0,0,0" >

				<TextBlock
					FontSize="26"
					Foreground="White"
					Height="87"
					HorizontalAlignment="Center"
					TextAlignment="Center"
					VerticalAlignment="Top"
					Margin="80,52,62,0"
					Text="Please wait, Connecting to SQL Server to Load Database data...."
					TextWrapping="Wrap"
					Width="450"/>
			</WrapPanel>


		</Grid>

		<Grid Grid.Row="4"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<!--#region BankAccount data Grid-->

			<!--How to use RelativeSource !!-->
			<!--<Rectangle Fill="Yellow" Height="250" Stroke="Red" Width="{Binding RelativeSource={RelativeSource Self}, Path=Height}"/>-->
			<!--<Rectangle Fill="Yellow" Height="250" Stroke="Red" Width="{Binding RelativeSource={RelativeSource Self}, Path=Parent.ActualHeight}"/>-->
			
			<DataGrid Name="BankGrid"
					AllowDrop="True"				    
					AlternatingRowBackground="{StaticResource Cyan5}"				    
					AutoGenerateColumns="False"
					BeginningEdit="BankGrid_BeginningEdit"
					BorderBrush="{StaticResource Blue3}"
					BorderThickness="0"
					CanUserAddRows="False"
					CanUserResizeColumns="True"
					CanUserSortColumns="True"				    
					CellEditEnding="BankGrid_CellEditEnding"
					ColumnHeaderHeight="25"
					ColumnHeaderStyle ="{StaticResource HeaderStyleBlue}"
					GotFocus="BankGrid_GotFocus"
					Grid.ColumnSpan="4"
					HorizontalAlignment="Stretch"
					IsEnabled="true"
					PreviewDragEnter="BankGrid_PreviewDragEnter"
					PreviewMouseMove="BankGrid_PreviewMouseMove"
					PreviewMouseLeftButtonDown="BankGrid_PreviewMouseLeftButtondown"
					PreviewMouseRightButtonDown="BankGrid_PreviewMouseRightButtondown"
					RowEditEnding="ViewerGrid_RowEditEnding"
					RowHeight="22"
					ScrollBar.Scroll="BankGrid_Scroll"
					ScrollViewer.ScrollChanged="BankGrid_ScrollChanged"
					SelectedCellsChanged="BankGrid_SelectedCellsChanged"
					SelectionChanged="ItemsView_OnSelectionChanged"
					SelectionMode="Single"
					SelectionUnit="FullRow"
					TabIndex="1"
					TargetUpdated="BankGrid_TargetUpdated"
					VerticalAlignment="Stretch"
					VerticalGridLinesBrush="{StaticResource Blue9}"
					VirtualizingPanel.ScrollUnit="Pixel"
					Visibility="Collapsed" 
					CellStyle="{StaticResource BankGridStyle}">

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Magenta" />
					<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Blue"/>-->

				</DataGrid.Resources>

				<DataGrid.Columns>
					<DataGridTemplateColumn Header="Id" Width="40"
									x:Name="ID"
									SortMemberPath="Id">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock
									Text="{Binding Id }"
									HorizontalAlignment="Center"									
									VerticalAlignment="Top" />
							</DataTemplate>

						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>

					<DataGridTextColumn Header="Customer #" 
								  SortMemberPath="CustNo"
								  Binding="{Binding CustNo,
									Mode=TwoWay,
									UpdateSourceTrigger=PropertyChanged}">
					</DataGridTextColumn>

					<DataGridTextColumn Header="Bank #" Width="80"
									Binding ="{Binding BankNo,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}">
					</DataGridTextColumn>

					<DataGridTextColumn Header="Type" Width="40"
									Binding="{Binding AcType,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}" />

					<DataGridTextColumn Header="Balance" Width="90"
									Binding="{Binding Balance,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus,
									StringFormat='£ ##,###,###.00'}" />

					<!--<DataGridTemplateColumn Header="IntRate" Width="50">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding IntRate, StringFormat='#.##', Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}"
								   HorizontalAlignment="Center"
										   VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<TextBox Text="{Binding IntRate}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>-->

					<DataGridTextColumn Header="Interest" Width="60"
									Binding="{Binding IntRate, Mode=TwoWay,
									UpdateSourceTrigger=LostFocus,
									StringFormat='0.00'}" />

					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="Open Date" Width="90">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=ODate,
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=ODate,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}">
								</DatePicker>
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>

					<DataGridTemplateColumn Header="Close Date" Width="90">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=CDate,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>
				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion BankAccount data Grid-->
		</Grid>



		<Grid Grid.Row="4"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="727*" />
				<ColumnDefinition Width="65*" />
			</Grid.ColumnDefinitions>

			<!--#region Customers data Grid-->
			<DataGrid x:Name="CustomerGrid"
				AlternatingRowBackground="{StaticResource Yellow3}"
				AllowDrop="True"
			    AutoGenerateColumns="False"
				BeginningEdit="CustomerGrid_BeginningEdit"
				BorderBrush="{StaticResource Yellow3}"
				BorderThickness="2"
				CanUserAddRows="false"
				CanUserSortColumns="True"
				CellEditEnding="CustomerGrid_CellEditEnding"
				ColumnHeaderHeight="25"
				ColumnHeaderStyle ="{StaticResource HeaderStyleYellow}"
				GotFocus="CustomerGrid_GotFocus"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Stretch"
				IsEnabled="true"
				IsSynchronizedWithCurrentItem="False"
				MouseRightButtonDown="CustomerGrid_MouseRightButtonDown"
				PreviewMouseMove="CustomerGrid_PreviewMouseMove"
				PreviewMouseLeftButtonDown="CustomerGrid_PreviewMouseLeftButtondown"
 				PreviewMouseLeftButtonUp="CustomerGrid_PreviewMouseLeftButtonup"
				PreviewMouseRightButtonDown="CustomerGrid_PreviewMouseRightButtonDown"
				RowEditEnding="ViewerGrid_RowEditEnding"
				RowHeight="22"
				ScrollBar.Scroll="CustomerGrid_Scroll"
				ScrollViewer.ScrollChanged="CustomerGrid_ScrollChanged"
				SelectedCellsChanged="CustomerGrid_SelectedCellsChanged"
				SelectionChanged="ItemsView_OnSelectionChanged"
				SelectionMode="Single"
				SelectionUnit="FullRow"
				TabIndex="2"
				TargetUpdated="CustomerGrid_TargetUpdated"
				VerticalAlignment="Stretch"
				VerticalGridLinesBrush="{StaticResource Orange0}"
				VirtualizingPanel.ScrollUnit="Pixel"
				Visibility="Collapsed"
				CellStyle="{StaticResource CustomerGridStyle}">

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB" />
				</DataGrid.Resources>

				<DataGrid.Columns>
					<!--Force column to be Read only-->
					<DataGridTemplateColumn Header="Id" Width="40">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Id}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<DataGridTextColumn Header="Customer #" Width="70"
									Binding="{Binding CustNo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Bank #" Width="70"
									Binding="{Binding BankNo, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="Type" Width="30"
									Binding="{Binding AcType, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="First Name" Width="80"
									Binding="{Binding FName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Surname" Width="80"
									Binding="{Binding LName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Address 1" Width="130"
									Binding="{Binding Addr1, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Address 2" Width="120"
									Binding="{Binding Addr2, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Town" Width="80"
									Binding="{Binding County, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="County" Width="70"
									Binding="{Binding County, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="PostCode" Width="80"
									Binding="{Binding PCode, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Phone #" Width="80"
									Binding="{Binding Phone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Mobile" Width="80"
									Binding="{Binding Mobile, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Birthday" Width="80"
									Binding="{Binding Dob, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,StringFormat='dd/MM/yyyy'}" />
					<DataGridTextColumn Header="A/c Opened"
									Binding ="{Binding Path=ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,StringFormat='dd/MM/yyyy'}" />
					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="A/c Closed" Width="80">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
									StringFormat='dd/MM/yyyy'}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<!--<DataGridTemplateColumn Header="Close Date" Width="80">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									StringFormat='dd/MM/yyyy'}"
									HorizontalAlignment="Center"
									VerticalAlignment="Top" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
						<DataGridTemplateColumn.CellEditingTemplate>
							<DataTemplate>
								<DatePicker SelectedDate="{Binding Path=CDate,
									Mode=TwoWay,
									UpdateSourceTrigger=PropertyChanged}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellEditingTemplate>
					</DataGridTemplateColumn>-->
				</DataGrid.Columns>
			</DataGrid>
			<!--#endregion Customers data Grid-->
		</Grid>


		<Grid Grid.Row="4"
			Grid.Column="1"
			Grid.ColumnSpan="3"
			Grid.RowSpan="2">

			<!--#region DetailsViewModel data Grid-->
			<!--AlternatingRowBackground="{StaticResource Green7}"-->
			<DataGrid x:Name="DetailsGrid"
				    
				AllowDrop="True"
				AlternatingRowBackground="{StaticResource Green9}"
				AutoGenerateColumns="False"
				BeginningEdit="DetailsGrid_BeginningEdit"
				BorderBrush="{StaticResource Green3}"
				BorderThickness="2"
				CanUserAddRows="false"
				CanUserSortColumns="True"
				CellEditEnding="DetailsGrid_CellEditEnding"
				ColumnHeaderHeight="25"
				ColumnHeaderStyle ="{StaticResource HeaderStyleGreen}"
				GotFocus="DetailsGrid_GotFocus"
				Grid.ColumnSpan="4"
				HorizontalAlignment="Stretch"
				IsEnabled="true"
				IsSynchronizedWithCurrentItem="False"
				PreviewMouseMove="DetailsGrid_PreviewMouseMove"
				PreviewMouseLeftButtonDown="DetailsGrid_PreviewMouseLeftButtondown"
				PreviewMouseRightButtonDown="DetailsGrid_PreviewMouseRightButtondown"
				PreviewMouseDown="DetailsGrid_PreviewMouseDown_1"
				RowEditEnding="ViewerGrid_RowEditEnding"
				RowHeight="25"
				ScrollBar.Scroll="DetailsGrid_Scroll"
				ScrollViewer.ScrollChanged="DetailsGrid_ScrollChanged"
				SelectedCellsChanged="DetailsGrid_SelectedCellsChanged"
				SelectionChanged="ItemsView_OnSelectionChanged"
				SelectionMode="Single"
				SelectionUnit="FullRow"
				TabIndex="3"
				TargetUpdated="DetailsGrid_TargetUpdated"
				VerticalAlignment="Stretch"
				VerticalGridLinesBrush="{StaticResource Green0}"
				VirtualizingPanel.ScrollUnit="Pixel"
				Visibility="Collapsed"
				CellStyle="{StaticResource DetailsGridStyle}">
				

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<DataGrid.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB" />
				</DataGrid.Resources>


				<DataGrid.Columns>
					<DataGridTemplateColumn Header="Id" Width="40">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Id}"
									HorizontalAlignment="Center"
									VerticalAlignment="Center" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
					<DataGridTextColumn Header="Customer #" Width="80"
									Binding="{Binding CustNo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
					<DataGridTextColumn Header="Bank #" Width="80"
									Binding="{Binding BankNo, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="Type" Width="40"
									Binding="{Binding AcType, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="Balance" Width="90"
						SortMemberPath="Balance"
						Binding="{Binding Balance,
									Mode=TwoWay,
									UpdateSourceTrigger=LostFocus,
						StringFormat='£ ##,###,###.00'}" />
					<DataGridTextColumn Header="Interest" Width="60"
									SortMemberPath="IntRate"
									Binding="{Binding IntRate, Mode=TwoWay,
									StringFormat='0.00 ',
									UpdateSourceTrigger=LostFocus}" />
					<DataGridTextColumn Header="A/c Opened"
									Binding ="{Binding Path=ODate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
									StringFormat='dd/MM/yyyy'}" />
					<DataGridTextColumn Header="TestClass"
									Binding ="{Binding Path=Integervalues.AGE, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
									/>
					<!--the next 2 show 2 ways to format a date - 1 a Converter the other a direct Format string-->
					<DataGridTemplateColumn Header="A/c Closed" Width="80" SortMemberPath="CDate">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=CDate,
									Mode=TwoWay, UpdateSourceTrigger=PropertyChanged,
									StringFormat='dd/MM/yyyy'}" />
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>

				</DataGrid.Columns>
			</DataGrid>
	<!--#endregion DetailsViewModel data Grid-->
			
		</Grid>
		<Grid
			Grid.Row="6"
			Grid.Column="0"
			Grid.ColumnSpan="4"
			HorizontalAlignment="Right"
			VerticalAlignment="Center"
			Height="45"
			>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="120"/>
				<ColumnDefinition Width="160"/>
			</Grid.ColumnDefinitions>

			<TextBlock
				x:Name="Count"
				Background="DarkGray"				
				FontSize="14"
				FontWeight="DemiBold"
				Foreground="Red"
				Grid.Row="1"
				Grid.Column="1"
				Height="30"
				Padding="5"
				Text="Count"
				TextAlignment="Center"
				VerticalAlignment="Center"
				Width="100"
				/>

			<!--Close Window Button-->
			<Button x:Name="CloseViewer"
					Background="{StaticResource HeaderBrushRed}"
					Click="CloseViewer_Click"
					Content="Close Viewer"
					Focusable="True"
					FontSize="11"
					Foreground="White"
					Grid.Row="1"
					Grid.Column="2"
					Height="40" 
					IsEnabled="true"
					Margin="55,0,0,0"
					MouseDown="Window_MouseDown"
					Template="{StaticResource HorizontalGradientTemplateRed}"
					Width="105" />

		</Grid>
		<TextBlock
			
				x:Name="StatusBar"
				Background="Beige"
				Foreground="Black"
				Grid.Column="1"
				Grid.Row="6"
				Height="30"
				HorizontalAlignment="Stretch"
				Margin="0,5,5,5"
				Padding="6"
				Style="{StaticResource gradientblue}"
				Text="Status comments "
				TextAlignment="Center"
				VerticalAlignment="Center"
				/>

	</Grid>
</Window>
