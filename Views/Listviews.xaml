<Window x:Class="WPFPages.Views.Listviews"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPFPages.Views"
        mc:Ignorable="d"
        Title="Listviews" Height="450" Width="800"
	  MinHeight="550"
	  MinWidth="800">

	<Window.Resources>
		<!--<local:FormatIntValuesConvertor x:Key="formatIntValuesConvertor"/>
		<local:FormatServicePeriodConvertor x:Key="formatServicePeriodConvertor"/>-->

	<!--Declare some Named colors for our color scheme-->
	<SolidColorBrush x:Key="BorderBrushDark" Color="DarkGoldenrod"/>
	<SolidColorBrush x:Key="BorderBrushLight" Color="DarkGray"/>
	<SolidColorBrush x:Key="BackgroundUnselected" Color="LightBlue"/>
	<SolidColorBrush x:Key="BackgroundSelected" Color="Gold"/>
	<SolidColorBrush x:Key="BackgroundMouseOver" Color="Red"/>
	<SolidColorBrush x:Key="ForegroundMouseOver" Color="White"/>
	<SolidColorBrush x:Key="ForegroundSelected" Color="Magenta"/>
	<SolidColorBrush x:Key="ForegroundUnselected" Color="Black"/>
	<SolidColorBrush x:Key="TextBoxForeground" Color="Black"/>
	<SolidColorBrush x:Key="TextBoxBackground" Color="Green"/>
	<SolidColorBrush x:Key="ListViewItemBackground" Color="Green"/>

		<Style  x:Key="tb1" TargetType="{x:Type TextBlock}">
			<Setter Property="Background" Value="White"/>
			<Setter Property="Foreground" Value="Green"/>
			<Setter Property="FontWeight" Value="Bold"/>
			<Setter Property="FontStyle" Value="Italic"/>
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red"/>
					<Setter Property="Foreground" Value="White"/>
				</Trigger>
			</Style.Triggers>
		</Style>

		<!--These styles all work well, at least in ListView 1_1-->
	<Style x:Key="tbStyle1" TargetType="TextBox">
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="BorderBrush" Value="White"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="false">
				<Setter Property="Background" Value="White"/>
				<Setter Property="Foreground" Value="Red"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="BorderBrush" Value="White"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="tblStyle1" TargetType="TextBlock">
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="Yellow"/>
				<Setter Property="Foreground" Value="Black"/>
				<Setter Property="Height" Value="10"/>
			</Trigger>
			<Trigger Property="IsMouseOver" Value="False">
				<Setter Property="Background" Value="Yellow"/>
				<Setter Property="Foreground" Value="Black"/>
				<Setter Property="Height" Value="10"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="tblStyle2" TargetType="TextBlock">
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="Red"/>
				<Setter Property="Foreground" Value="White"/>
				<Setter Property="Height" Value="15"/>
			</Trigger>
			<!--<Trigger Property="IsMouseOver" Value="False">
				<Setter Property="Background" Value="Yellow"/>
				<Setter Property="Foreground" Value="White"/>
				<Setter Property= "FontSize"  Value="11"/>
				<Setter Property="Height" Value="20"/>
			</Trigger>-->
		</Style.Triggers>
	</Style>

		<Style x:Key ="LvMouseOverStyle" TargetType="ListViewItem" >
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red" />
					<Setter Property="Foreground" Value="White" />
				</Trigger>
				<Trigger Property="IsSelected" Value="true">
					<Setter Property="BorderThickness" Value="1"/>
					<Setter Property="BorderBrush" Value="Red"/>
					<Setter Property="Foreground" Value="Blue" />
				</Trigger>
			</Style.Triggers>
		</Style>

		<Style x:Key ="Lview3" TargetType="ListView" >
			<Style.Triggers>
				<!--<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red" />
					<Setter Property="Foreground" Value="White" />
				</Trigger>
				<Trigger Property="IsMouseOver" Value="false">
					<Setter Property="Background" Value="Blue" />
					<Setter Property="Foreground" Value="White" />
				</Trigger>-->
				<Trigger Property="IsSelected" Value="true">
					<Setter Property="BorderThickness" Value="1"/>
					<Setter Property="BorderBrush" Value="Red"/>
					<Setter Property="Foreground" Value="Blue" />
					<Setter Property="Background" Value="Gray" />
				</Trigger>
			</Style.Triggers>
		</Style>


	</Window.Resources>

	<!--*****************************************************-->
	<!--Overall Page  Grid-->
	<!--Covers Entire window layout incl Centre Divider etc-->
	<!--*****************************************************-->
	<Grid x:Name="MasterGrid">

		<!--#region gridsetup-->
		
		<Grid.RowDefinitions>
			<RowDefinition Height="30"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="10"/>
		</Grid.RowDefinitions>

		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="2"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="5" />
			<ColumnDefinition Width="*" />
			<ColumnDefinition Width="2"/>
		</Grid.ColumnDefinitions>

		<!--Background for entire page-->
		<Grid.Background>
			<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
				<GradientStop Color="Black" Offset="0"/>
				<GradientStop Color="Gainsboro" Offset="0.972"/>
			</LinearGradientBrush>
		</Grid.Background>


		<!--#region End of header-->
		<!--Central Divider Border-->
		<Grid x:Name="CentralDivider" 
			Background="Transparent"
			Grid.Row="1" Grid.Column="2" 
			 Grid.RowSpan="3"
			 Grid.ColumnSpan="1"
			Width="8"
			 >
			<Border BorderBrush="#B47717"
				   BorderThickness="0"
				   Background="Red"
				   HorizontalAlignment="Stretch"
				   VerticalAlignment="Stretch"
				  Width="2"
				   ></Border>
		</Grid>

		<TextBlock Grid.Row="0" Grid.Column="1"
				Grid.ColumnSpan="3"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"					 
				Height="35" Width="145"
				Text="This is Page 2"
				 FontSize="14"
				Foreground="White"/>

		<!--#endregion End of header-->

		<!--#endregion gridsetup-->
		<!--============================================================-->


		<!--#region left column-->
		<!--============================================================-->
		<!--#region Grid column 1 - Left panel 1 -->

		<Grid Name="Column_1_complete" 
			Grid.Row="1" Grid.Column="1"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch">

			<!--Internal grid  for LEFT panel 1-->
			<Grid 
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch"
				>
				<Grid.RowDefinitions>
					<RowDefinition  Height="25"/>
					<RowDefinition  Height="*"/>
					<RowDefinition/>
				</Grid.RowDefinitions>

				<Label Grid.Row="0" Foreground="white" HorizontalContentAlignment="Left"
					  HorizontalAlignment="Left"
					Height="25" Width="200">Listview with Edit Box Field (lview)</Label>

				<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
					of a <Border> outside the ListBox, plus the clever Binding below -->
				<Border x:Name="HeightHelperPanel7" 
					Grid.Row="1" 
					Grid.RowSpan="2"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch" 
					>
				<!--First ListView with Editable <TextBox> fields
					This uses Styles declared in our Resources above -->
					<ListView x:Name="lview" 	
						Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel7}"							
						    VerticalContentAlignment="Stretch"
						    VerticalAlignment="Stretch"
							Background="Beige" 
							BorderBrush="Blue"
							FontFamily="Consolas"
							ScrollViewer.VerticalScrollBarVisibility="Auto"
						>
						<ListView.Resources>
							<!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{DynamicResource Blue}" />-->
							<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Red" />
						</ListView.Resources>

						<ListView.ItemTemplate>
							<DataTemplate>
								<WrapPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Center">
									<!--<Image Height="18" Width="18" Source="/Images/ian.jpg" />-->
									<!--<Image Source="{Binding Path=UserPic}" Height="46" Width="46"></Image>-->
									<!--This formats the Id as Right justified-->
									<TextBlock  Text="{Binding Id}"
								  Style="{StaticResource tblStyle1}"
									HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" 										  
									Height="14" Width="35" FontSize="12" FontWeight="Normal" Margin="0"/>
									<TextBox Text="{Binding CustNo, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    Height="14" Width="65"  FontSize="12" FontWeight="Bold" Margin="0"/>
									<TextBox Text="{Binding BankNo, UpdateSourceTrigger=PropertyChanged}"
									 Style="{StaticResource tbStyle1}"									
									    Height="14" Width="65"  FontSize="12" FontWeight="Bold" Margin="0"/>
									<TextBox x:Name="tb5" Text="{Binding AcType, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" Width="25"  FontWeight="Bold" Margin="0"/>
									<TextBox x:Name="tb6" Text="{Binding IntRate, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" Width="45"  FontWeight="Bold" Margin="0"/>
									<TextBox x:Name="tb7" Text="{Binding Balance, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" Width="85"  FontWeight="Bold" Margin="0"/>
									<TextBox x:Name="tb8" Width="75"  Text="{Binding ODate, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" FontWeight="Bold" Margin="0"/>
									<TextBox x:Name="tb9" Width="75"  Text="{Binding CDate, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" FontWeight="Bold" Margin="0"/>
								</WrapPanel>

							</DataTemplate>
						</ListView.ItemTemplate>

						<ListView.ItemContainerStyle>
							<Style TargetType="{x:Type ListViewItem}">
								<Setter Property="Background" Value="Transparent" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type ListViewItem}">
											<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										 Background="{TemplateBinding Background}">
												<ContentPresenter />
											</Border>
											<ControlTemplate.Triggers>
												<!--<Trigger Property="IsSelected" Value="True">
												<Setter Property="Background" Value="{StaticResource BackgroundSelected}" />
												<Setter Property="Foreground" Value="{StaticResource ForegroundSelected}" />
											</Trigger>-->
												<Trigger Property="IsMouseOver" Value="True">
													<Setter Property="Background"						Value="{StaticResource BackgroundMouseOver}" />
													<Setter Property="Foreground" Value="{StaticResource ForegroundMouseOver}" />
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>

							</Style>
						</ListView.ItemContainerStyle>
					</ListView>
				</Border>
			</Grid>
				
			<!--End of inner grid for LEFT Panel 1-->
		</Grid>
		<!--End of outer Panel grid-->

		<!--#endregion Grid column 1 - Left panel 1 -->
		<!--============================================================-->
		
		<!--#region Grid column 1 - Left panel 2 -->
		<Grid Name="Grid_LeftColumn_2"		
			Grid.Row="2" Grid.Column="1"
			 MinWidth="200"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			 ShowGridLines="True"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			>

			<!--#region listview 2 (with Internal Grid) -->
			<Grid
				MinWidth="250"
				>
				<Grid.RowDefinitions>
					<RowDefinition  Height="25"/>
					<RowDefinition  Height="*"/>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<Label Grid.Row="0" Foreground="white" HorizontalContentAlignment="Left"
					 >Listview with GridView inside it - using a GroupStyle to separate content by Sex.(lView2)</Label>

				<Border x:Name="HeightHelperPanel8" 
					Grid.Row="1" 
					Grid.RowSpan="2"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch" 
					>
					<!--Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel8}"-->
					<!--First ListView with Editable <TextBox> fields
					This uses Styles declared in our Resources above -->

					<ListView Name="lview2"
						Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel8}"		
						Grid.Row="1"
						ScrollViewer.CanContentScroll="True"
						SelectionMode="Single"
						VerticalContentAlignment="Stretch"
						VerticalAlignment="Stretch"
						>

						<ListView.Resources>
							<!-- We can format anything we might wish here -->
							<!--<Style TargetType="{x:Type TextBlock}">
								--><!--Set items background here--><!--
								<Setter Property="Background" Value="DarkTurquoise" />
								<Setter Property="Foreground" Value="Black" />
								<Style.Triggers>
									--><!--This highlights the selected field in our TextBlocks 
								below as White text on Red background on MouseOver--><!--
									<Trigger Property="IsMouseOver" Value="True">
										<Setter Property="Background" Value="Red"/>
										<Setter Property="Foreground" Value="White"/>
									</Trigger>
								</Style.Triggers>
							</Style>-->

							<!--We have to do this to format the Column headers-->
							<Style TargetType="{x:Type GridViewColumnHeader}">
								<Setter Property="HorizontalContentAlignment" Value="Left"/>
								<Setter Property="Background" Value="Blue"/>
								<Setter Property="Foreground" Value="White"/>
								<Setter Property="FontWeight" Value="Bold"/>
								<Setter Property="FontStyle" Value="Italic"/>
							</Style>
	
						</ListView.Resources>

						<ListView.View>
							<!--Rather than just have a standard ListView, We are 
							going to use an internal Grid View INSIDE this Listview-->
							<GridView AllowsColumnReorder="True" >
								<!--<GridView.Columns >-->
									<!--Column 1-->
									<GridViewColumn Header=" Id" Width="50" DisplayMemberBinding="{Binding Id}" >
										<!--Now we can define the data layout-->
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Id}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--<GridViewColumn Header="Cust #" Width="50" TextOptions.TextFormattingMode="Ideal" >
										--><!--Now we can define the data layout--><!--
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding CustNo}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>-->
									<!--Column 3-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding CustNo}"  Header="Cust. #" Width="65">
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding CustNo}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding BankNo}"  Header="Bank. #" Width="65">
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding BankNo}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding AcType, UpdateSourceTrigger=PropertyChanged}" Header="Type" Width="35" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding AcType}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding IntRate, UpdateSourceTrigger=PropertyChanged}" Header="Int" Width="45" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding IntRate}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding Balance, UpdateSourceTrigger=PropertyChanged}" Header="Balance" Width="75" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Balance}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding ODate, UpdateSourceTrigger=PropertyChanged}" Header="Opened" Width="75" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding ODate}"
												Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn DisplayMemberBinding="{Binding CDate, UpdateSourceTrigger=PropertyChanged}" Header="Closed" Width="75" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding CDate}"
													     Style="{StaticResource tb1}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

								<!--</GridView.Columns>-->
							</GridView>


						</ListView.View>

						<!--Now we setup the Grouping we want on BankNo-->
						<ListView.GroupStyle>
							<GroupStyle>
								<GroupStyle.HeaderTemplate>
									<!--The Binding is NOT our  BankNo  just accept that we use this when grouping-->
									<DataTemplate>
										<TextBlock FontWeight="Heavy" FontSize="10" Text="{Binding CustNo}" Style="{StaticResource tb1}"/>
									</DataTemplate>
								</GroupStyle.HeaderTemplate>
							</GroupStyle>
						</ListView.GroupStyle>
					</ListView>
					<!--#endregion listview (Grid ONE)-->
				</Border>
			</Grid>

		</Grid>
		<!--#endregion Grid column 1 - Left panel 2 -->
		<!--============================================================-->

		<!--#region Grid column 1 - Left panel 3 -->

		<Grid Name="Grid_LeftColumn_3"		
			Grid.Row="3" Grid.Column="1"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			>

			<!--#region listview 3-->
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition  Height="25"/>
					<RowDefinition  Height="*"/>
					<RowDefinition/>
				</Grid.RowDefinitions>

				<Label Grid.Row="0" Foreground="Black" 
					 HorizontalContentAlignment="Left"
					  HorizontalAlignment="Left" 
					 FontWeight="Bold"
					>Listview with GroupStyle to group by BankNo (lview3)</Label>

				<Border x:Name="HeightHelperPanel18" 
					Grid.Row="1" 
					Grid.RowSpan="2"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch" 
					>

					<ListView Name="lview3" 
						Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel18}"
						VerticalContentAlignment="Stretch" VerticalAlignment="Stretch"
						Background="Gray" Foreground="White">

						<ListView.Resources>
							<!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{DynamicResource Blue}" />-->
							<!--<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Red" />-->

							<!-- We can format anything we might wish here -->
							<Style TargetType="{x:Type ListView}">
								<!--This is the default Listview setup-->
								<Setter Property="BorderThickness" Value="1"/>
								<Setter Property="BorderBrush" Value="Black"/>
								<Setter Property="VerticalAlignment" Value="Top"/>
								<Setter Property="Foreground" Value="White" />
							</Style>
							<!--We have to do this to format the Column headers-->
							<Style TargetType="{x:Type GridViewColumnHeader}">
								<!--This is the Column's Header bar-->
								<Setter Property="HorizontalContentAlignment" Value="Left"/>
								<Setter Property="Background" Value="Yellow"/>
								<Setter Property="Foreground" Value="Black"/>
								<Setter Property="FontWeight" Value="SemiBold"/>
								<Setter Property="FontStyle" Value="Oblique"/>
							</Style>

							<!--We have to do this to format the Column headers-->
							<Style TargetType="{x:Type TextBlock}">
								<!--This is the Column's Header bar-->
								<Setter Property="HorizontalAlignment" Value="Left"/>
								<Setter Property="Foreground" Value="Blue"/>
								<Setter Property="FontWeight" Value="SemiBold"/>
								<Setter Property="FontStyle" Value="Oblique"/>
							</Style>
						</ListView.Resources>

						<ListView.View>
							<!--Rather than just have a standard ListView, We are 
							going to use an internal Grid View INSIDE this Listview-->
							<GridView AllowsColumnReorder="True" >
								<GridView.Columns>
									<!--Column 1-->
									<!--Binding here is the easy way to bind a column
									Sadly, you canot format the header text directly, 
									so you just have to use a Style declared at the ListView top level.-->
									<GridViewColumn 
									Header="Id" Width="35" >
										<!--Now we can define the data layout-->
										<GridViewColumn.CellTemplate>
											<!--Setup the 1st column data with an image -->
											<DataTemplate>
												<TextBlock  Text="{Binding Path=Id}"
														  Style="{StaticResource tblStyle2}"
													FontSize="11" FontWeight="Normal" Margin="0"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 2-->
									<GridViewColumn Header=" Cust #" Width="45">
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock  Text="{Binding CustNo}" Style="{StaticResource tblStyle2}"
													FontSize="11" FontWeight="Normal" Margin="0"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>
									<!--Column 3-->
									<!--Binding here is the easy way to bind a column-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn Header="Bank #" Width="55">
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding BankNo}"  Style="{StaticResource tblStyle2}"
												 />
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>
	

									<!--Column 4-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn Header="Typed" Width="35">
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding AcType}"  Style="{StaticResource tblStyle2}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 5-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn Header=" Int" Width="40" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding IntRate,  UpdateSourceTrigger=PropertyChanged}"
												  Style="{StaticResource tblStyle2}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

									<!--Column 5-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn Header="Opened" Width="75" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding ODate,  UpdateSourceTrigger=PropertyChanged}"
												  Style="{StaticResource tblStyle2}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>
									<!--Column 5-->
									<!--Binding here is the easy way to bind a column-->
									<GridViewColumn Header="Closed" Width="55" >
										<GridViewColumn.CellTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding CDate,  UpdateSourceTrigger=PropertyChanged}"
												  Style="{StaticResource tblStyle2}"/>
											</DataTemplate>
										</GridViewColumn.CellTemplate>
									</GridViewColumn>

								</GridView.Columns>
							</GridView>

						</ListView.View>

						<ListView.GroupStyle>
							<!--//Not sure how this works really !!-->
							<GroupStyle>
								<GroupStyle.ContainerStyle>
									<!--All bindingnames are defaulted by xaml itself - we just use them as is-->
									<Style TargetType="{x:Type GroupItem}">
										<Setter Property="Template">
											<Setter.Value>
												<ControlTemplate>
													<!--This lets us expand the selected group-->
													<Expander IsExpanded="True">
														<!--Now we format the Group header line itself-->
														<Expander.Header>
															<StackPanel Orientation="Horizontal">
																<TextBlock Text="{Binding CustNo}" 
																	FontWeight="Bold" 
																		Foreground="Red" 
																		FontSize="14" 
																		VerticalAlignment="Bottom" />
																<TextBlock Text="{Binding BankNo}" 
																	FontSize="14" Foreground="Green" 
																	FontWeight="Bold" 
																	FontStyle="Italic" 
																	Margin="10,0,0,0" 
																	VerticalAlignment="Bottom" />
																<TextBlock Text=" Bank A/c's" 
																	FontSize="14" 
																	Foreground="Silver" 
																	FontStyle="Italic" 
																	VerticalAlignment="Bottom" />
															</StackPanel>
														</Expander.Header>
														<ItemsPresenter />
													</Expander>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</GroupStyle.ContainerStyle>
							</GroupStyle>
						</ListView.GroupStyle>

						<!--END of Listview Grid-->
					</ListView>
				</Border>
				<!--End of Column1_3-->
				<!--</Grid>-->
				<!--</Grid>-->
				<!--#endregion listview (Grid TWO)-->
			</Grid>
		</Grid>
		
		<!--#endregion Grid column 1 - Left panel 3 -->
		<!--============================================================-->
		<!--#endregion left column-->



		<!--#region RIGHT COLUMN -->
		<!--============================================================-->
		
		<!--Grid "Column2_1"-->
		<Grid Name="Column_2_1_complete" 
			Grid.Row="1" 
			Grid.Column="3"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
				>
			<Grid.RowDefinitions>
				<RowDefinition  Height="25"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<Label Grid.Row="0" Foreground="White" HorizontalContentAlignment="Left"
				HorizontalAlignment="Left" FontWeight="Normal"
				Height="25" Width="500">Standard ListBox (emplistBox7)</Label>

			<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
			of a <Border> outside the ListBox, plus the clever Binding below -->
			<Border Grid.Row="1" x:Name="HeightHelperPanel2" 
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch" 
				>

				<ListBox Name="Emplistbox7" 
					Grid.Row="1" 
					Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel2}"
					Background="CadetBlue"
					BorderBrush="white" 
				   BorderThickness="1"
					HorizontalAlignment="Stretch" 
					VerticalContentAlignment="Stretch" 
				     VerticalAlignment="Stretch"
					ScrollViewer.VerticalScrollBarVisibility="auto"
					ItemsSource="{Binding}">

					<!--This makes the selected row visible when window looses focus - works on any grid-->
					<ListBox.Resources>
						<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
					</ListBox.Resources>

					<!--This WORKS and Gives a Red Background on MouseOver and a Blue 
						Background when selected for this control only as it is declared locally to it-->
					<ListBox.ItemContainerStyle>

						<Style TargetType="{x:Type ListBoxItem}">
							<Setter Property="Background" Value="LightBlue" />

							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type ListBoxItem}">
										<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
											Background="{TemplateBinding Background}">
											<ContentPresenter />
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsSelected" Value="True">
												<Setter Property="Background" Value="LightBlue" />
												<Setter Property="Foreground" Value="Blue" />
											</Trigger>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="Red" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ListBox.ItemContainerStyle>


					<ListBox.ItemTemplate >
						<DataTemplate >
							<WrapPanel Orientation="Horizontal" HorizontalAlignment="Left" Height="20">
								<TextBlock  Text="{Binding Path=Id}" Foreground="White" Width="35"/>
								<TextBlock  Text="{Binding Path=CustNo}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="55"/>
								<TextBlock  Text="{Binding Path=BankNo}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="65"/>
								<TextBlock  Text="{Binding Path=AcType}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="25"/>
								<TextBlock  Text="{Binding Path=IntRate}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="25"/>
								<TextBlock  Text="{Binding Path=Balance}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="70"/>
								<TextBlock  Text="{Binding Path=ODate}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="135"/>
								<TextBlock  Text="{Binding Path=CDate}"
										FontSize="11" FontWeight="Normal" Margin="0" Width="135"/>
							</WrapPanel>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
			</Border>
			<!--End of Grid "Column2_1"-->
		</Grid>
		<!--============================================================-->

		<!--Grid "Column2_2"-->
		<Grid Name="Column_2_2_complete" 
			Grid.Row="2" Grid.Column="3"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			MinWidth="250"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			>

			<Grid.RowDefinitions>
				<RowDefinition  Height="25"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
			of a <Border> outside the ListBox, plus the clever Binding below -->
			<Label Grid.Row="0" Foreground="White" HorizontalContentAlignment="Left"
				HorizontalAlignment="Left" FontWeight="Normal"
				Height="30" Width="500">Standard ListBox (emplistBox8)</Label>

			<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
			of a <Border> outside the ListBox, plus the clever Binding below -->
			<Border Grid.Row="1" x:Name="HeightHelperPanel11" 
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch" 
				>

				<ListBox Name="Emplistbox8" 
				Grid.Row="1" 
				Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel11}"
				Background="CadetBlue"
				BorderBrush="white"
				BorderThickness="2"
				HorizontalContentAlignment="Left"
			   VerticalAlignment="Stretch"
				MinWidth="250"
				ItemsSource="{Binding}">

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<ListBox.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</ListBox.Resources>

				<!--This WORKS and Gives a Red Background on MouseOver and a Blue 
					Background when selected for this control only as it is declared locally to it-->
				<ListBox.ItemContainerStyle>

					<Style TargetType="{x:Type ListBoxItem}">
						<Setter Property="Background" Value="DarkGoldenrod" />
						<Setter Property="Height" Value="38" />
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type ListBoxItem}">
									<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										Background="{TemplateBinding Background}">
										<ContentPresenter />
									</Border>
									<ControlTemplate.Triggers>
										<Trigger Property="IsSelected" Value="True">
											<Setter Property="Background" Value="Blue" />
										</Trigger>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="Background" Value="Red" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Style>
				</ListBox.ItemContainerStyle>
				<ListBox.ItemTemplate >
					<DataTemplate >
						<WrapPanel Orientation="Horizontal" HorizontalAlignment="Left">
							<!--<TextBlock Text="{Binding EmployeeId}"
									Foreground="White"/>-->
							<TextBlock  Text="{Binding Path=Id}" Foreground="White" Margin="10,0,0,0" Width="35"/>
							<TextBlock Text="{Binding CustNo}" Foreground="red" Width="65"/>
							<TextBlock Text="{Binding BankNo}" Foreground="Blue" Width="65"/>
							<TextBlock Text="{Binding AcType,  UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="20"/>
							<TextBlock Text="{Binding IntRate,  UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="30"/>
							<TextBlock Text="{Binding Balance,  UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="66"/>
							<TextBlock Text="{Binding ODate,  UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="80"/>
							<TextBlock Text="{Binding CDate,  UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="80"/>
						</WrapPanel>
					</DataTemplate>
				</ListBox.ItemTemplate>
			</ListBox>
			</Border>
			<!--End of Grid "Column2_1"-->
		</Grid>
		<!--============================================================-->

		<!--Grid "Column2_3"-->
		<Grid Name="Column_2_3_complete" 
			Grid.Row="3" Grid.Column="3"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			MinWidth="250"
			VerticalAlignment="Stretch">

			<Grid.RowDefinitions>
				<RowDefinition  Height="25"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<Label Grid.Row="0" HorizontalContentAlignment="Left"
					  HorizontalAlignment="Left" FontWeight="Bold" Foreground="Black"
					Height="25" Width="500">A  more complex  ListBox (emplistBox9)</Label>
			<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
			of a <Border> outside the ListBox, plus the clever Binding below -->
			<Border Grid.Row="1" x:Name="HeightHelperPanel12" 
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch" 
				>

				<ListBox Name="Emplistbox9" 
	   				Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel12}"

				    Grid.Row="1"
					Background="Gold"
					Foreground="white"
					BorderBrush="green"
					BorderThickness="2"
					HorizontalContentAlignment="Left"	
					MinWidth="250"
					VerticalAlignment="Stretch"
				    ScrollViewer.VerticalScrollBarVisibility="Visible"
				    ItemsSource="{Binding}">

					<!--This makes the selected row visible when window looses focus - works on any grid-->
					<ListBox.Resources>
						<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
					</ListBox.Resources>

					<ListBox.ItemTemplate >
						<DataTemplate >

							<Border BorderBrush="Black" BorderThickness="0" Name="Bd">
								<Grid ShowGridLines="False">
									<Grid.RowDefinitions>
										<RowDefinition Height="45" />
										<RowDefinition Height="*" />
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="100"/>
										<ColumnDefinition Width="65"/>
										<ColumnDefinition Width="230"/>
									</Grid.ColumnDefinitions>

									<!--Image + Sex-->
									<WrapPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="1" 
								Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">

										<!--<Image Height="48" Width="48" Source="{Binding UserPic}" />-->
										<!--<TextBlock Text="  "/>-->
										<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" 									 
									 Text="{Binding Id}" 
									 Foreground="Black"/>
									</WrapPanel>

									<!--Employee #-->
									<WrapPanel Grid.Row="0" Grid.Column="1" Grid.RowSpan="3"  
									Margin="0,0,0,0"
									Orientation="Vertical" HorizontalAlignment="Left"
									VerticalAlignment="Top">
										<Border BorderBrush="Black" BorderThickness="1" >
											<Grid >
												<Grid.RowDefinitions>
													<RowDefinition Height="20" />
													<RowDefinition Height="35" />
												</Grid.RowDefinitions>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="99"/>
													<ColumnDefinition Width="188"/>
												</Grid.ColumnDefinitions>
												<WrapPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0" >
													<TextBlock Width="30" Text=" Id #" Foreground="Blue" HorizontalAlignment="Left" VerticalAlignment="Center"/>
													<TextBlock Foreground="Blue" HorizontalAlignment="Center" VerticalAlignment="Center"
											Text="{Binding CustNo}" />
												</WrapPanel>

												<WrapPanel Orientation="Horizontal"  Grid.Row="1" Grid.Column="0" >
													<TextBlock Text=" Bank A/C #   " Foreground="Red" HorizontalAlignment="Left" VerticalAlignment="Center"/>
													<TextBlock HorizontalAlignment="Right" 									 
												 Text="{Binding BankNo}"  
												 Foreground="Black"/>
												</WrapPanel>
											</Grid>
										</Border>
									</WrapPanel>

									<Border BorderBrush="Black" BorderThickness="1" Margin="3" Grid.Column="2">
										<Grid HorizontalAlignment="Left" Width="150"
									Grid.Row="0" Grid.Column="2"  Margin="5" >
											<Grid.RowDefinitions>
												<RowDefinition Height="25" />
												<RowDefinition Height="25" />
											</Grid.RowDefinitions>

											<WrapPanel Grid.Row="0" 
											Orientation="Horizontal" HorizontalAlignment="Left" 
												VerticalAlignment="Top" Height="20" Width="200">
												<TextBlock Text="Balance  : " Foreground="Black" Width="80" FontSize="12"/>
												<TextBlock Text="{Binding Balance}" Foreground="Magenta" Width="80" FontSize="14"/>
											</WrapPanel>

											<WrapPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Left" 
												 VerticalAlignment="Top" Height="22" Width="200">
												<TextBlock Text="A/c Type : " Foreground="Black" Width="80" FontSize="12"/>
												<TextBlock Grid.Row="1" Grid.Column="2" 
										 Text="{Binding AcType,  UpdateSourceTrigger=PropertyChanged}" Foreground="Magenta" Width="100" FontSize="14"/>
											</WrapPanel>

										</Grid>
									</Border>
								</Grid>
							</Border>

							<!--End of data Template-->
						</DataTemplate>
					</ListBox.ItemTemplate >

				</ListBox>
			</Border>
			<!--End of Grid "Column2_1"-->
		</Grid>
		<!--============================================================-->


		<!--#endregion listview 3-->

		<!--#region control buttons-->
		<!--<Grid Name="Column2_Buttons" 
			Grid.Row="5" Grid.Column="3" 
			HorizontalAlignment="Right" 
			VerticalAlignment="Center"
			Grid.ColumnSpan="2" Grid.RowSpan="1" 
			Margin="0,0,0,0">


			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="170"/>
				<ColumnDefinition Width="170"/>
			</Grid.ColumnDefinitions>


			-->
		<!-- We place An ELLIPSE shaped button inside a one celled grid.
			NB Use PreviewMouseDown="PreviewMouseDown_Click" 
			to access the leftMouseDown anywhere a control does not 
			support LeftMouseDown of any type -->

		<!--This is how to create a pseudo Button shaped like an Ellipse with 
			what appears to be normal Button.Content Text on top of it and normal 
			Button functionality so that any styling of the Ellipse does not get 
			intefered with by mousing over the TextBlock that contains the 
			"Buttons" Text/Content Element-->
		<!--NB to stop the TextBlock from intefering with the Ellipses 
			MouseOver Event the Property ISHITTESTVISIBLE is set to FALSE
				so that anything inside it does not receive any Interface events 
			such as Mouse events-->
		<!--
			<Ellipse x:Name="Page2_Close_Ellipse"
				Grid.Row="0" Grid.Column="0"
				Style="{StaticResource MyEllipses}"
				Stroke="Black"
				StrokeThickness="2"
				Opacity=".8"
				Width="150" Height="58" HorizontalAlignment="Right"  />

			-->
		<!--//Display the "Button Text"-->
		<!--
			<StackPanel Grid.Row="0" HorizontalAlignment="Center"
					VerticalAlignment="Center" 
				IsHitTestVisible="false"
				Background="Transparent">
				<TextBlock
					Background="Transparent" Text="Close Page">
				</TextBlock>
			</StackPanel>

			-->
		<!--This is how to load and use a UserControl, this
				one is my own ExitButton based on an Ellipse
				It also relies on the inclusion of a headerline as shown below
				that defines the user Control's (file) name
				xmlns:EllipseExitButton="http://schemas.microsoft.com/netfx/2009/xaml/presentation" xmlns:local="clr-namespace:WPFPages"
				-->
		<!--<Grid Grid.Row="0" Grid.Column="2" >
				<local:EllipseExitButton Foreground="White" FontSize="18"/>
			</Grid>-->



		<!--#endregion controlbuttons-->

		<!--*****************************************************-->
		<!--END - Overall Page  Grid-->
		<!--*****************************************************-->
		<!--End of Grid Column2_Buttons"-->
		<!--
		</Grid>-->

		<!--End of Column2_Full" -->
	</Grid>
</Window>
