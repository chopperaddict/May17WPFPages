<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				xmlns:local="clr-namespace:WPFPages.Dicts">

	<!--Microsoft example of a button Template that completely
	overrides the default button Display Properties whilst
	retaining methods like Click="" etc.
	There is no mouseover type functionality & I cant find a way
	to implement it in this code...
	It creates a plain Oval with fill color etc all
	as specified in Button Declaration-->
	<Style x:Key="OvalButton" TargetType="Button">
		<!--Set to true to not get any properties from the themes.-->
		<Setter Property="OverridesDefaultStyle" Value="true" />

		<!--This does NOTHING at all !!!-->
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<GradientStop Color="{Binding Background}" Offset="0.25" />
					<GradientStop Color="{Binding Foreground}" Offset="0.55" />
					<GradientStop Color="{Binding BorderBrush}" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<!--This is used for display of an Ellipse-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Grid>
						<!--The Ellipse uses Back/Fore ground as specified in declaration-->
						<Ellipse Fill="{TemplateBinding Background}" />
						<ContentPresenter
							HorizontalAlignment="Center"
							VerticalAlignment="Center" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--New version-->
	<Style x:Key="OvalButton2" TargetType="Button">
		<!--Set to true to not get any properties from the themes.-->
		<Setter Property="OverridesDefaultStyle" Value="false" />
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<GradientStop Color="Red" Offset="0.25" />
					<GradientStop Color="OrangeRed" Offset="0.55" />
					<GradientStop Color="Orange" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>

	<!--Produced by "Andy" at Stack Overflow - and it works
		As he says, to override inbuilt functionality, you have to
		OVERWRITE/REPLACE the properties the control normally handles,
		like mouseover, mouseDown etc.
		NB The OverridesDefaultStyle=True line lets us define default properties
		but allows the programmer to override them in his definitions if required
		-->

	<Style x:Key="StandardYtoRGradientButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<!--<Setter Property="Foreground" Value="Blue" />-->
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="Normal" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<!--<GradientStop Color="GREEN" Offset="0.25" />-->
					<!--<GradientStop Color="{StaticResource BackgroundColor2}" Offset="0.25" />-->
					<GradientStop Color="#FFFFD190" Offset="0.25" />
					<GradientStop Color="#F94334" Offset="0.65" />
					<GradientStop Color="#9C700A" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}">
						<!--MOST IMPORTANT the ContentPresenter lives here and displays our
							"Content" text correctly NB: Interestingly, it is in the BORDER which
							is the Outermost part of a buttons "design" as shown very clearly in
							the Visual Tree so that is where I need to put it with other controls

							V.Tree shows that inside the ContentPresenter is a StackPanel that
							actually contains the Contents text-->
						<ContentPresenter Margin="2"
	                                HorizontalAlignment="Center"
		                           VerticalAlignment="Center"
			                      RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--Now to handle those pesky Triggers-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
							<GradientStop Color="#F9A68B" Offset="0" />
							<GradientStop Color="#6B1D04" Offset="1" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<!--Makes gradient fill work horizontally-->
						<RadialGradientBrush Center="0.5, 0.8">
							<GradientStop Color="Beige" Offset="0" />
							<GradientStop Color="Green" Offset="1" />
						</RadialGradientBrush>
						<!--<LinearGradientBrush="0,0" EndPoint="1,0">
							<GradientStop Color="Aquamarine" Offset="0.35" />
							<GradientStop Color="Goldenrod" Offset="0.95" />
							<GradientStop Color="DarkGray" Offset="1" />
						</LinearGradientBrush>-->
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ExitButton" TargetType="Button">
		<!--Default layout-->
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<!--These defaults can be overriden by the Button Code in the design-->
		<Setter Property="Height" Value="50" />
		<Setter Property="Width" Value="150" />
		<Setter Property="BorderBrush" Value="White" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="FontSize" Value="20" />
		<Setter Property="FontWeight" Value="DemiBold" />
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
					<GradientStop Color="DarkRed" Offset="0.25" />
					<GradientStop Color="#C67928" Offset="0.55" />
					<GradientStop Color="Orange" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<!--Lets change the Border as well but use the colors
			defined in the Buttons declaration in the xaml code-->
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}">
						<!--MOST IMPORTANT the ContentPresenter lives here and displays our
							"Content" text correctly NB: Interestingly, it is in the BORDER which
							is the Outermost part of a buttons "design" as shown very clearly in
							the Visual Tree so that is where I need to put it with other controls

							V.Tree shows that inside the ContentPresenter is a StackPanel that
							actually contains the Contents text-->
						<ContentPresenter Margin="2"
	                                HorizontalAlignment="Center"
		                           VerticalAlignment="Center"
			                      RecognizesAccessKey="True" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<!--Now to handle those pesky Triggers-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="Black" />
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
							<GradientStop Color="DarkRed" Offset="2" />
							<GradientStop Color="#C67928" Offset="0.55" />
							<GradientStop Color="Orange" Offset="0.25" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="OrangeRed" />
				<Setter Property="Background" Value="White" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--Handles TextBlocks using Wingdings font family only-->
	<Style x:Key="WingDingStyle" TargetType="TextBlock">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<Setter Property="Foreground" Value="White" />

		<Style.Triggers>
			<Trigger Property="FontFamily" Value="Wingdings">
				<Setter Property="FontSize"  Value="36" />
				<Setter Property="Foreground"  Value="Blue" />
				<!--<Setter Property="Background"  Value="Transparent" />-->
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="Black" />
				<!--<Setter Property="FontSize"  Value="48" />-->
				<Setter Property="FontWeight" Value="Bold" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--This works pretty well overall
	used by main button bar is in this app-->
	<Style x:Key="RedToBlackButton" TargetType="Button"
		BasedOn="{StaticResource StandardYtoRGradientButton}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		<!--These do nothing at all, but the do demonstrate how to use
			the {Binding xxx} to pass user defined values thru-->
		<Setter Property="FontSize" Value="{Binding FontSize}" />
		<Setter Property="Height" Value="{Binding Height}" />
		<Setter Property="Width" Value="{Binding Width}" />
		<Setter Property="Margin" Value="2,0,0,0" />

		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
					<GradientStop Color="Red" Offset="0.25" />
					<GradientStop Color="#FFFFD190" Offset="0.75" />
					<GradientStop Color="Black" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background">
					<Setter.Value>
						<LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
							<GradientStop Color="#F9A68B" Offset="0" />
							<GradientStop Color="#6B1D04" Offset="1" />
						</LinearGradientBrush>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style  x:Key="GradientEllipse"
			TargetType="Ellipse">
		<Setter Property="Fill">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="Gray" Offset="0.0" />
					<GradientStop Color="Yellow" Offset="0.5" />
					<GradientStop Color="Blue" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="PrintButton" TargetType="Button">
		<Setter Property="OverridesDefaultStyle" Value="false" />

		<!--<Setter Property="Width" Value="200" />
		<Setter Property="Height" Value="80" />-->
		<!--<Setter Property="OverridesDefaultStyle" Value="true" />-->
		<!--These do nothing at all, but the do demonstrate how to use
			the {Binding xxx} to pass user defined values thru-->
		<!--<Setter Property="FontSize" Value="{Binding FontSize}" />
			<Setter Property="Height" Value="{Binding Height}" />
			<Setter Property="Width" Value="{Binding Width}" />-->
		<!--<Setter Property="Margin" Value="5" />-->
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
					<GradientStop Color="#D87253" Offset="0.25" />
					<GradientStop Color="#FFFFD190" Offset="0.75" />
					<GradientStop Color="#696764" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="OrangeRed" />
				<Setter Property="Foreground" Value="White" />
			</Trigger>
		</Style.Triggers>
	</Style>
</ResourceDictionary>
