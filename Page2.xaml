<Page x:Class="WPFPages.Page2"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
	 xmlns:local="clr-namespace:WPFPages"
	 xmlns:MyData="clr-namespace:WpfUI"
      mc:Ignorable="d" 
      d:DesignHeight="750" d:DesignWidth="1000"
	 Background="Gray"
	 Title="Page2">
	<!--<Page.DataContext>
	</Page.DataContext>-->

	<Page.Resources>

		<!--<local:FormatIntValuesConvertor x:Key="formatIntValuesConvertor"/>
		<local:FormatServicePeriodConvertor x:Key="formatServicePeriodConvertor"/>-->

		<!--
		This key is essential to make the Bindings below work, 
		because we use the Key value "people" in our individual 
		Control's DataContext lines below ???.
		
		This means we could use different DataContexts with 
		different Controls if we want to. 
		
		If commented out, it fails on InitializeComponent() at the 
		first instance of DataContext in the xaml below - 
		(This Line) DataContext="{StaticResource people}" ItemsSource="{Binding}"
		
		The People Class is declared with the ObservableCollection<Person> Decoration
		which is how we are accessing that data, in this file at least.
		-->

		<!--<MyData:People x:Key="people"/>
		<local:AllStaff x:Key="allStaff"/>-->

		<!--<Trigger.EnterActions>
						<Trigger Property="IsMouseOver" Value="true"/>
						</Trigger.EnterActions>
							<Setter Property="Background" Value="Red"/>
				|<Setter Property="Foreground" Value="White"/>-->
		<!--</Style.Triggers>
		</Style>-->

		<!--<Storyboard x:Key="OnSelectionChanged1"/>
		<SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
		<SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
		<SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
		<SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>-->

		<!--Declare some Named colors for our color scheme-->
		<SolidColorBrush x:Key="BorderBrushDark" Color="DarkGoldenrod"/>
		<SolidColorBrush x:Key="BorderBrushLight" Color="DarkGray"/>
		<SolidColorBrush x:Key="BackgroundUnselected" Color="LightBlue"/>
		<SolidColorBrush x:Key="BackgroundSelected" Color="Gold"/>
		<SolidColorBrush x:Key="BackgroundMouseOver" Color="Red"/>
		<SolidColorBrush x:Key="ForegroundMouseOver" Color="White"/>
		<SolidColorBrush x:Key="ForegroundSelected" Color="Magenta"/>
		<SolidColorBrush x:Key="ForegroundUnselected" Color="Black"/>
		<SolidColorBrush x:Key="TextBoxForeground" Color="Black"/>
		<SolidColorBrush x:Key="TextBoxBackground" Color="Green"/>
		<SolidColorBrush x:Key="ListViewItemBackground" Color="Green"/>
		<!--<Style TargetType="ListViewItem" x:Name="LvMouseOverStyle">
			<Style.MultiTriggers>
				<Trigger Property="IsMouseOver" Value="True"/>
			</Style.MultiTriggers>
		</Style>-->


		<!--These styles all work well, at least in ListView 1_1--> 
		<Style x:Key="tbStyle1" TargetType="TextBox">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red"/>
					<Setter Property="Foreground" Value="White"/>
					<Setter Property="BorderThickness" Value="3"/>
					<Setter Property="BorderBrush" Value="White"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="tblStyle1" TargetType="TextBlock">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Yellow"/>
					<Setter Property="Foreground" Value="Black"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="tblStyle2" TargetType="TextBlock">
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red"/>
					<Setter Property="Foreground" Value="White"/>
				</Trigger>
			</Style.Triggers>
		</Style>
		<Style x:Key ="LvMouseOverStyle" TargetType="ListViewItem" >
			<Style.Triggers>
				<Trigger Property="IsMouseOver" Value="true">
					<Setter Property="Background" Value="Red" />
					<Setter Property="Foreground" Value="White" />
				</Trigger>
				<Trigger Property="IsSelected" Value="true">
					<Setter Property="BorderThickness" Value="1"/>
					<Setter Property="BorderBrush" Value="White"/>
					<Setter Property="Foreground" Value="Blue" />
				</Trigger>
			</Style.Triggers>
		</Style>

	</Page.Resources>

	<!--*****************************************************-->
	<!--Overall Page  Grid-->
	<!--Covers Entire window layout incl Centre Divider etc-->
	<!--*****************************************************-->
	<Grid x:Name="MasterGrid">

		<!--#region master grid-->
		<!--Background for entire page-->
		<Grid.Background>
			<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
				<GradientStop Color="Black" Offset="0"/>
				<GradientStop Color="Gainsboro" Offset="0.972"/>
			</LinearGradientBrush>
		</Grid.Background>

		<!--#region gridsetup-->
		<Grid.RowDefinitions>
			<RowDefinition Height="20"/>
			<RowDefinition Height="30"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="70"/>
			<RowDefinition Height="10"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>

			<ColumnDefinition Width="10"/>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition Width="20" />
			<ColumnDefinition Width="*" />
			<ColumnDefinition Width="10"/>
		</Grid.ColumnDefinitions>
		<!--#endregion gridsetup-->

		<!--Central Divider Border-->
		<Grid x:Name="CentralDivider" 
			Grid.Row="2" Grid.Column="2" 
			 Grid.RowSpan="4"
			 Grid.ColumnSpan="1"
			   Margin="0,6,0,0"
			 Background="CadetBlue">
			<Border BorderBrush="#B47717"
				   BorderThickness="1"
				   Background="Gray"
				   HorizontalAlignment="Stretch"
				   VerticalAlignment="Stretch"
				   ></Border>
		</Grid>

		<TextBlock Grid.Row="0" Grid.Column="1"
				Grid.ColumnSpan="3"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"					 
				Height="35" Width="145"
				Text="This is Page 2"
				 FontSize="22"
				Foreground="White"/>

		<TextBlock Grid.Row="1" Grid.Column="1"
				 Grid.ColumnSpan="5"
				 HorizontalAlignment="Center"
				VerticalAlignment="Center"					 
				 Height="25" FontSize="16" Foreground="Gold"
				Text="All of the \V/ TextBoxes in the left window below can be edited, and all other Controls will update in real time..."
				/>
		<!--#endregion master grid-->

		<!--#region left column-->

		<!--%%%%%%%%%%%%%%%%%%%%%%%%%%%%%-->
		<!--Inner Container Grid for Listview 1-->
		<Grid Name="Column_1_complete" 
			Grid.Row="2" Grid.Column="1"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Margin="5"
			Height="auto">

			<Grid >
				<Grid.RowDefinitions>
					<RowDefinition  Height="25"/>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<Label Grid.Row="0" Foreground="white" HorizontalContentAlignment="Left"
					  HorizontalAlignment="Left"
					Height="25" Width="200">Listview with Edit Box Fields</Label>
				
				
				<!--First ListView with Editable <TextBox> fields
				This uses Styles declared in our Resources above -->
				<ListView x:Name="lview" 	
						Grid.Row="1"
						HorizontalAlignment="Stretch"
					VerticalAlignment="Stretch"
					Background="Beige" 
					BorderBrush="Blue"
					Width="auto"
					Height="auto"
					MinHeight="80"
					MinWidth="250"
					FontFamily="Consolas"
					ScrollViewer.VerticalScrollBarVisibility="Auto"
					ItemsSource="{Binding}" 
					>
					<!--We HAVE to use DataContext with the syntax exactly as 
					shown above if the binding to the "people" ObservableCollection is to work-->
					
					<!--But, I now cannot use a Resourced style (See Resources above) to add control 
					for Mouseover etc that works at an Item level, only at the top ListView level-->


					<ListView.ItemTemplate>
						<DataTemplate>
							<WrapPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Center">
								<!--<Image Height="18" Width="18" Source="/Images/ian.jpg" />-->
								<Image Source="{Binding Path=UserPic}" Height="46" Width="46"></Image>
								<!--This formats the Id as Right justified-->
								<TextBlock  Text="{Binding EmployeeId}"
								  Style="{StaticResource tblStyle1}"
									HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" 										  
									Height="34" Width="25" FontSize="16" FontWeight="Normal" Margin="7"/>
								<TextBox Text="{Binding EmployeeFirstName, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" FontWeight="Bold" Margin="5"/>
								<TextBox Text="{Binding EmployeeLastName, UpdateSourceTrigger=PropertyChanged}"
									 Style="{StaticResource tbStyle1}"									
									    FontSize="14" FontWeight="Bold" Margin="5"/>
								<TextBox x:Name="tb5" Text="{Binding EmployeeLastName, UpdateSourceTrigger=PropertyChanged}"
									Style="{StaticResource tbStyle1}"									
									    FontSize="14" FontWeight="Bold" Margin="5"/>
							</WrapPanel>

						</DataTemplate>
					</ListView.ItemTemplate>
					
					<!--This WORKS for Background and Gives a Red Background on MouseOver and a Yellow 
					Background when selected for this control only as it is declared locally to it
					Foreground is ignored for some reason -->
					<ListView.ItemContainerStyle>
						<Style TargetType="{x:Type ListViewItem}">
							<Setter Property="Background" Value="Transparent" />
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type ListViewItem}">
										<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										 Background="{TemplateBinding Background}">
											<ContentPresenter />
										</Border>
										<ControlTemplate.Triggers>
											<!--<Trigger Property="IsSelected" Value="True">
												<Setter Property="Background" Value="{StaticResource BackgroundSelected}" />
												<Setter Property="Foreground" Value="{StaticResource ForegroundSelected}" />
											</Trigger>-->
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="{StaticResource BackgroundMouseOver}" />
												<Setter Property="Foreground" Value="{StaticResource ForegroundMouseOver}" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
							
						</Style>


					</ListView.ItemContainerStyle>
				</ListView>
			</Grid>

		</Grid>

		<!--Inner Container Grid for Listview 2-->
		<Grid Name="Grid_LeftColumn_2"		
			Grid.Row="3" Grid.Column="1"
			 MinHeight="30"
			 MinWidth="200"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			 Margin="5"
			 ShowGridLines="True"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Height="auto">

			<!--#region listview 2 (with Internal Grid) -->
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition  Height="25"/>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<Label Grid.Row="0" Foreground="white" HorizontalContentAlignment="Left"
					Height="25" Width="500">Listview with GridView inside it - using a GroupStyle to separate content by Sex.</Label>

				<ListView Name="lview2"
						Grid.Row="1"
					Height="auto"
					MinHeight="30"
					VerticalAlignment="Stretch"
					HorizontalAlignment="Stretch"					
					Background="DarkTurquoise" Margin="0"
					ScrollViewer.CanContentScroll="True"
					SelectionMode="Single"
					ItemsSource="{Binding}"
					>

					<ListView.Resources>
						<!-- We can format anything we might wish here -->
						<Style TargetType="{x:Type TextBlock}">
							<!--Set items background here-->
							<Setter Property="Background" Value="DarkTurquoise" />
							<Setter Property="Foreground" Value="Black" />
							<Style.Triggers>
								<!--This highlights the selected field in our TextBlocks 
								below as White text on Red background on MouseOver-->
								<Trigger Property="IsMouseOver" Value="True">
									<Setter Property="Background" Value="Red"/>
									<Setter Property="Foreground" Value="White"/>
								</Trigger>
							</Style.Triggers>
						</Style>

						<!--We have to do this to format the Column headers-->
						<Style TargetType="{x:Type GridViewColumnHeader}">
							<Setter Property="HorizontalContentAlignment" Value="Left"/>
							<Setter Property="Foreground" Value="Red"/>
							<Setter Property="FontWeight" Value="Bold"/>
							<Setter Property="FontStyle" Value="Italic"/>
						</Style>
												
					</ListView.Resources>

					<ListView.View>
						<!--Rather than just have a standard ListView, We are 
							going to use an internal Grid View INSIDE this Listview-->
						<GridView AllowsColumnReorder="True" >
							<GridView.Columns >
								<!--Column 1-->
								<!--Binding here is the easy way to bind a column
							Sadly, you canot format the header text directly, 
							so you just have to use a Style declared at the ListView top level.-->
								<GridViewColumn Header="                     Id" Width="100" TextOptions.TextFormattingMode="Display" >
									<!--Now we can define the data layout-->
									<GridViewColumn.CellTemplate>
										<!--Setup the data with an image as well-->
										<DataTemplate>

											<StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">
												<!--Using an image loaded into the Donor Class-->
												<Image Source="{Binding Path=UserPic}"
												  Height="42" Width="42" />

												<TextBlock Text="  "/>
												<!--<TextBlock Text="{Binding EmployeeId}"/>-->
												<TextBlock  Text="{Binding Path=EmployeeId }"
													HorizontalAlignment="Left" VerticalAlignment="Center" 
													FontSize="14" FontWeight="Normal" Margin="1"/>
											</StackPanel>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 3-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn DisplayMemberBinding="{Binding Sex}"  Header="Gender" Width="55">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding EmployeeFirstName}"/>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 4-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn DisplayMemberBinding="{Binding EmployeeFirstName}"  Header="First Name" Width="135">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<!--<TextBlock Text="{Binding EmployeeFirstName}"/>-->
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 4-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn DisplayMemberBinding="{Binding EmployeeLastName, UpdateSourceTrigger=PropertyChanged}" Header="Last Name" Width="135" >
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<!--<TextBlock Text="{Binding EmployeeLastName}"/>-->
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>
							</GridView.Columns>
						</GridView>
					</ListView.View>

					<!--Now we setup the Grouping we want on Sex-->
					<ListView.GroupStyle>
						<GroupStyle>
							<GroupStyle.HeaderTemplate>
								<!--The Binding is NOT our Employee Name just 
							accept that we use this when grouping-->
								<DataTemplate>
									<TextBlock FontWeight="Heavy" FontSize="12" Text="{Binding Name}"/>
								</DataTemplate>
							</GroupStyle.HeaderTemplate>
						</GroupStyle>
					</ListView.GroupStyle>
				</ListView>
				<!--#endregion listview (Grid ONE)-->
			</Grid>
		</Grid>



		<!--This one will use specialised Grouping formatting-->
		<!--Inner Container Grid for Listview 2-->

		<Grid Name="Grid_LeftColumn_3"		
			Grid.Row="4" Grid.Column="1"
			Grid.ColumnSpan="1"
			Grid.RowSpan="2"
			 Margin="5"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Height="auto">

			<!--#region listview 3-->
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition  Height="25"/>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<Label Grid.Row="0" Foreground="Black" HorizontalContentAlignment="Left"
					  HorizontalAlignment="Left" FontWeight="Bold"
					Height="25" Width="500">Listview using an Expander with GroupStyle to separate content by Sex</Label>
	
				<ListView Name="lview3" 
						Grid.Row="1"
						Height="auto"
						MinHeight="30" 
						VerticalAlignment="Stretch" 
						HorizontalAlignment="Stretch" 
						Background="Green" 
						ItemsSource="{Binding}">

					<ListView.Resources>
						<!-- We can format anything we might wish here -->
						<Style TargetType="{x:Type ListView}">
							<!--This is the default Listview setup-->
							<Setter Property="BorderThickness" Value="1"/>
							<Setter Property="BorderBrush" Value="{StaticResource ListViewItemBackground}"/>
							<Setter Property="MinHeight" Value="180"/>
							<Setter Property="VerticalAlignment" Value="Top"/>
							<Setter Property="Foreground" Value="White" />
						</Style>
						<!--We have to do this to format the Column headers-->
						<Style TargetType="{x:Type GridViewColumnHeader}">
							<!--This is the Column's Header bar-->
							<Setter Property="HorizontalContentAlignment" Value="Left"/>
							<Setter Property="Foreground" Value="Blue"/>
							<Setter Property="FontWeight" Value="SemiBold"/>
							<Setter Property="FontStyle" Value="Oblique"/>
						</Style>
					</ListView.Resources>

					<ListView.View>
						<!--Rather than just have a standard ListView, We are 
							going to use an internal Grid View INSIDE this Listview-->
						<GridView AllowsColumnReorder="True" >
							<GridView.Columns>
								<!--Column 1-->
								<!--Binding here is the easy way to bind a column
									Sadly, you canot format the header text directly, 
									so you just have to use a Style declared at the ListView top level.-->
								<GridViewColumn 
									Header="Image" Width="55" >
									<!--Now we can define the data layout-->
									<GridViewColumn.CellTemplate>
										<!--Setup the 1st column data with an image -->
										<DataTemplate>
											<WrapPanel Orientation="Horizontal" HorizontalAlignment="Left" Width="99">
												<Image Source="{Binding Path=UserPic}"
												  Height="42" Width="42">
												</Image>
												<TextBlock  Text="{Binding Path=EmployeeId}"
														  Style="{StaticResource tblStyle2}"
													FontSize="11" FontWeight="Normal" Margin="5"/>
											</WrapPanel>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 2-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn Header="    Id" Width="45">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock  Text="{Binding Path=EmployeeId}"
													FontSize="11" FontWeight="Normal" Margin="5"/>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 3-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn Header="Gender" Width="55">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding Sex}"  Style="{StaticResource tblStyle2}"/>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 4-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn Header="First Name" Width="85">
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding EmployeeFirstName}"  Style="{StaticResource tblStyle2}"/>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>

								<!--Column 5-->
								<!--Binding here is the easy way to bind a column-->
								<GridViewColumn Header="Last Name" Width="95" >
									<GridViewColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding EmployeeLastName,  UpdateSourceTrigger=PropertyChanged}"
												  Style="{StaticResource tblStyle2}"/>
										</DataTemplate>
									</GridViewColumn.CellTemplate>
								</GridViewColumn>
							</GridView.Columns>
						</GridView>

					</ListView.View>

					<ListView.GroupStyle>
						<!--//Not sure how this works really !!-->
						<GroupStyle>
							<GroupStyle.ContainerStyle>
								<!--All bindingnames are defaulted by xaml itself - we just use them as is-->
								<Style TargetType="{x:Type GroupItem}">
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate>
												<!--This lets us expand the selected group-->
												<Expander IsExpanded="True">
													<!--Now we format the Group header line itself-->
													<Expander.Header>
														<StackPanel Orientation="Horizontal">
															<TextBlock Text="{Binding Name}" 
																	FontWeight="Bold" 
																		Foreground="Gray" 
																		FontSize="22" 
																		VerticalAlignment="Bottom" />
															<TextBlock Text="{Binding Sex}" 
																	FontSize="22" Foreground="Green" 
																	FontWeight="Bold" 
																	FontStyle="Italic" 
																	Margin="10,0,0,0" 
																	VerticalAlignment="Bottom" />
															<TextBlock Text=" Item(s)" 
																	FontSize="22" 
																	Foreground="Silver" 
																	FontStyle="Italic" 
																	VerticalAlignment="Bottom" />
														</StackPanel>
													</Expander.Header>
													<ItemsPresenter />
												</Expander>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
								</Style>
							</GroupStyle.ContainerStyle>
						</GroupStyle>
					</ListView.GroupStyle>

					<!--END of Listview Grid-->
				</ListView>
				
				<!--End of Column1_3-->
				<!--</Grid>-->
				<!--</Grid>-->
				<!--#endregion listview (Grid TWO)-->
			</Grid>
		</Grid>
		<!--"Column_1_complete"-->

		<!--#endregion left column-->



		<!--#region RIGHT COLUMN -->
		
		
		<Grid Name="Column_2_1_complete" 
			Grid.Row="2" Grid.Column="3"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Margin="5">

			<Grid.RowDefinitions>
				<RowDefinition  Height="25"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<Label Grid.Row="0" Foreground="White" HorizontalContentAlignment="Left"
				HorizontalAlignment="Left" FontWeight="Normal"
				Height="25" Width="500">Standard ListBox (emplistBox7)</Label>
				
			<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
			of a <Border> outside the ListBox, plus the clever Binding below -->
			<Border Grid.Row="1" x:Name="HeightHelperPanel2" 
				HorizontalAlignment="Stretch"
				VerticalAlignment="Stretch" 
				MinHeight="188"
				MaxHeight="400">

	
					
				<ListBox Name="Emplistbox7" 
					Grid.Row="1" Margin="5,5,5,5"  
					Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel2}"
					MinHeight="30" MaxHeight="800"
					Background="CadetBlue"
					BorderBrush="white" BorderThickness="1"
					HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
					ScrollViewer.VerticalScrollBarVisibility="auto"
					ItemsSource="{Binding}">

					<!--This makes the selected row visible when window looses focus - works on any grid-->
					<ListBox.Resources>
						<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
					</ListBox.Resources>

					<!--This WORKS and Gives a Red Background on MouseOver and a Blue 
						Background when selected for this control only as it is declared locally to it-->
					<ListBox.ItemContainerStyle>

						<Style TargetType="{x:Type ListBoxItem}">
							<Setter Property="Background" Value="LightBlue" />
							
							<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type ListBoxItem}">
										<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
											Background="{TemplateBinding Background}">
											<ContentPresenter />
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsSelected" Value="True">
												<Setter Property="Background" Value="LightBlue" />
												<Setter Property="Foreground" Value="Blue" />
											</Trigger>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="Red" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ListBox.ItemContainerStyle>


					<ListBox.ItemTemplate >
						<DataTemplate >
							<WrapPanel Orientation="Horizontal" HorizontalAlignment="Left" Height="20">
								<TextBlock Text="  "/>
								<TextBlock  Text="{Binding Path=EmployeeId}" Foreground="White"/>
								<!--<TextBlock Text="{Binding EmployeeId}"
										Foreground="White"/>-->
								<TextBlock Text="   |   "/>
								<TextBlock Text="{Binding Sex}" Foreground="{Binding Field2}" Width="45"/>
								<TextBlock Text="{Binding EmployeeFirstName, Mode=TwoWay}" Foreground="Blue" Width="80"/>
								<TextBlock x:Name="lastname" Text="{Binding EmployeeLastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="100"/>
							</WrapPanel>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
			</Border>
			<!--End of Grid "Column2_1"-->
		</Grid>

		<Grid Name="Column_2_2_complete" 
			Grid.Row="3" Grid.Column="3"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Margin="5">

			<Grid.RowDefinitions>
				<RowDefinition  Height="25"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<!--NB-to get a Listbox to stretch vertically Automatically we have to use the workaround
			of a <Border> outside the ListBox, plus the clever Binding below -->
			<Label Grid.Row="0" Foreground="White" HorizontalContentAlignment="Left"
				HorizontalAlignment="Left" FontWeight="Normal"
				Height="30" Width="500">Standard ListBox (emplistBox8)</Label>
			
			<!--<Border x:Name="HeightHelperPanel2" Grid.Row="1">-->
			<!--Height="{Binding Path=ActualHeight, ElementName=HeightHelperPanel2}"-->

			<ListBox Name="Emplistbox8" 
				Grid.Row="1" 
				Margin="5,5,5,5"  
				Background="CadetBlue"
				BorderBrush="white"
				BorderThickness="2"
				VerticalAlignment="Stretch"
				HorizontalAlignment="Stretch"
				HorizontalContentAlignment="Left"
				ItemsSource="{Binding}">

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<ListBox.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</ListBox.Resources>

				<!--This WORKS and Gives a Red Background on MouseOver and a Blue 
					Background when selected for this control only as it is declared locally to it-->
					<ListBox.ItemContainerStyle>

						<Style TargetType="{x:Type ListBoxItem}">
						<Setter Property="Background" Value="DarkGoldenrod" />
						<Setter Property="Height" Value="38" />
						<Setter Property="Template">
								<Setter.Value>
									<ControlTemplate TargetType="{x:Type ListBoxItem}">
										<Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
										Background="{TemplateBinding Background}">
											<ContentPresenter />
										</Border>
										<ControlTemplate.Triggers>
											<Trigger Property="IsSelected" Value="True">
												<Setter Property="Background" Value="Blue" />
											</Trigger>
											<Trigger Property="IsMouseOver" Value="True">
												<Setter Property="Background" Value="Red" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</Setter.Value>
							</Setter>
						</Style>
					</ListBox.ItemContainerStyle>
					<ListBox.ItemTemplate >
						<DataTemplate >
							<WrapPanel Orientation="Horizontal" HorizontalAlignment="Left">
								<Image Height="32" Width="32" Source="{Binding UserPic}" />
								<TextBlock Text="  "/>
								<!--<TextBlock Text="{Binding EmployeeId}"
									Foreground="White"/>-->
								<TextBlock  Text="{Binding Path=EmployeeId}" Foreground="White"/>
								<TextBlock Text="   |   "/>
								<TextBlock Text="{Binding Sex}" Foreground="red" Width="45"/>
								<TextBlock Text="{Binding EmployeeFirstName}" Foreground="Blue" Width="80"/>
								<TextBlock Text="{Binding EmployeeLastName,  UpdateSourceTrigger=PropertyChanged}" Foreground="DarkMagenta" Width="100"/>
							</WrapPanel>
						</DataTemplate>
					</ListBox.ItemTemplate>
				</ListBox>
			<!--</Border>-->
			<!--End of Grid "Column2_1"-->
		</Grid>

		<!--Grid "Column2_3"-->
		<Grid Name="Column_2_3_complete" 
			Grid.Row="4" Grid.Column="3"
			Grid.ColumnSpan="1"
			Grid.RowSpan="1"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Margin="5">

			<Grid.RowDefinitions>
				<RowDefinition  Height="25"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<Label Grid.Row="0" HorizontalContentAlignment="Left"
					  HorizontalAlignment="Left" FontWeight="Bold" Foreground="Black"
					Height="25" Width="500">A  more complex  ListBox (emplistBox9)</Label>

			<ListBox Name="Emplistbox9" 
				    Grid.Row="1"
					Margin="5,0,5,5"  
					Height="auto"
					Background="Gold"
					Foreground="white"
					BorderBrush="green"
					BorderThickness="2"
					VerticalAlignment="Stretch"				    
					HorizontalAlignment="Stretch"
					HorizontalContentAlignment="Left"	
				    ScrollViewer.VerticalScrollBarVisibility="Visible"
				    ItemsSource="{Binding}">

				<!--This makes the selected row visible when window looses focus - works on any grid-->
				<ListBox.Resources>
					<SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="#96A3FB"/>
				</ListBox.Resources>

				<ListBox.ItemTemplate >
					<DataTemplate >

						<Border BorderBrush="Black" BorderThickness="0" Name="Bd">
							<Grid ShowGridLines="False">
								<Grid.RowDefinitions>
								<RowDefinition Height="55" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="100"/>
									<ColumnDefinition Width="115"/>
									<ColumnDefinition Width="230"/>
								</Grid.ColumnDefinitions>

								<!--Image + Sex-->
								<WrapPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Margin="3" 
								Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">

									<Image Height="48" Width="48" Source="{Binding UserPic}" />
									<TextBlock Text="  "/>
									<TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" 									 
									 Text="{Binding Sex}" 
									 Foreground="Black"/>
								</WrapPanel>

								<!--Employee #-->
								<WrapPanel Grid.Row="0" Grid.Column="1" Grid.RowSpan="3"  
									Margin="5,0,0,0"
									Orientation="Vertical" HorizontalAlignment="Left"
									VerticalAlignment="Top">
									<Border BorderBrush="Black" BorderThickness="1" Margin="3">
										<Grid >
											<Grid.RowDefinitions>
											<RowDefinition Height="20" />
											<RowDefinition Height="35" />
										</Grid.RowDefinitions>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="99"/>
											<ColumnDefinition Width="188"/>
										</Grid.ColumnDefinitions>
											<WrapPanel Orientation="Horizontal" Grid.Row="0" Grid.Column="0" Margin="5,0,0,0">
											<TextBlock Width="30" Text=" Id #" Foreground="Blue" HorizontalAlignment="Left" VerticalAlignment="Center"/>
											<TextBlock Foreground="Blue" HorizontalAlignment="Center" VerticalAlignment="Center"
											Text="{Binding Path=EmployeeId}" />
											</WrapPanel>

											<WrapPanel Orientation="Horizontal"  Grid.Row="1" Grid.Column="0" Margin="5,0,0,0">
												<TextBlock Text=" Employed   " Foreground="Red" HorizontalAlignment="Left" VerticalAlignment="Center"/>
												<TextBlock HorizontalAlignment="Right" 									 
												 Text="{Binding ServicePeriod}"  
												 Foreground="Black"/>
											</WrapPanel>
									</Grid>
									</Border>
								</WrapPanel>

								<Border BorderBrush="Black" BorderThickness="1" Margin="3" Grid.Column="2">
									<Grid HorizontalAlignment="Left" Width="150"
									Grid.Row="0" Grid.Column="2"  Margin="5" >
										<Grid.RowDefinitions>
											<RowDefinition Height="25" />
											<RowDefinition Height="25" />
										</Grid.RowDefinitions>

										<WrapPanel Grid.Row="0" 
											Orientation="Horizontal" HorizontalAlignment="Left" 
												VerticalAlignment="Top" Height="20" Width="200">
											<TextBlock Text="First Name : " Foreground="Black" Width="80" FontSize="12"/>
											<TextBlock Text="{Binding EmployeeFirstName}" Foreground="Magenta" Width="80" FontSize="14"/>
										</WrapPanel>

										<WrapPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Left" 
												 VerticalAlignment="Top" Height="22" Width="200">
											<TextBlock Text="Surname : " Foreground="Black" Width="80" FontSize="12"/>
											<TextBlock Grid.Row="1" Grid.Column="2" 
										 Text="{Binding EmployeeLastName,  UpdateSourceTrigger=PropertyChanged}" Foreground="Magenta" Width="100" FontSize="14"/>
										</WrapPanel>

									</Grid>
								</Border>
							</Grid>
						</Border>

						<!--End of data Template-->
					</DataTemplate>
				</ListBox.ItemTemplate >

			</ListBox>
			<!--End of Grid "Column2_1"-->
		</Grid>


		<!--#endregion listview 3-->

		<!--#region controlbuttons-->
		<Grid Name="Column2_Buttons" 
			Grid.Row="5" Grid.Column="3" 
			HorizontalAlignment="Right" 
			VerticalAlignment="Center"
			Grid.ColumnSpan="2" Grid.RowSpan="1" 
			Margin="0,0,0,0">


			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="170"/>
				<ColumnDefinition Width="170"/>
			</Grid.ColumnDefinitions>


			<!-- We place An ELLIPSE shaped button inside a one celled grid.
			NB Use PreviewMouseDown="PreviewMouseDown_Click" 
			to access the leftMouseDown anywhere a control does not 
			support LeftMouseDown of any type -->

			<!--This is how to create a pseudo Button shaped like an Ellipse with 
			what appears to be normal Button.Content Text on top of it and normal 
			Button functionality so that any styling of the Ellipse does not get 
			intefered with by mousing over the TextBlock that contains the 
			"Buttons" Text/Content Element-->
			<!--NB to stop the TextBlock from intefering with the Ellipses 
			MouseOver Event the Property ISHITTESTVISIBLE is set to FALSE
				so that anything inside it does not receive any Interface events 
			such as Mouse events-->
			<Ellipse x:Name="Page2_Close_Ellipse"
				Grid.Row="0" Grid.Column="0"
				Style="{StaticResource MyEllipses}"
				Stroke="Black"
				StrokeThickness="2"
				Opacity=".8"
				Width="150" Height="58" HorizontalAlignment="Right"  />

			<!--//Display the "Button Text"-->
			<StackPanel Grid.Row="0" HorizontalAlignment="Center"
					VerticalAlignment="Center" 
				IsHitTestVisible="false"
				Background="Transparent">
				<TextBlock
					Background="Transparent" Text="Close Page">
				</TextBlock>
			</StackPanel>

			<!--This is how to load and use a UserControl, this
				one is my own ExitButton based on an Ellipse
				It also relies on the inclusion of a headerline as shown below
				that defines the user Control's (file) name
				xmlns:EllipseExitButton="http://schemas.microsoft.com/netfx/2009/xaml/presentation" xmlns:local="clr-namespace:WPFPages"
				-->
			<!--<Grid Grid.Row="0" Grid.Column="2" >
				<local:EllipseExitButton Foreground="White" FontSize="18"/>
			</Grid>-->



			<!--#endregion controlbuttons-->

			<!--*****************************************************-->
			<!--END - Overall Page  Grid-->
			<!--*****************************************************-->
			<!--End of Grid Column2_Buttons"-->
		</Grid>
		<!--End of Column2_Full" -->
	</Grid>
</Page>
